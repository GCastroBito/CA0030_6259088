/* soapC.cpp
   Generated by gSOAP 2.8.12 from wsCCuenta.h

Copyright(C) 2000-2012, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
1) GPL or 2) Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif

#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapC.cpp ver 2.8.12 2019-12-18 22:38:10 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", soap->header, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->version && soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, NULL))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->version && soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (soap->header == NULL)
	{	if ((soap->header = soap_new_SOAP_ENV__Header(soap, -1)))
			soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (soap->fault == NULL)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);
		if (soap->fault == NULL)
			return;
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", NULL);
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code)
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode == NULL)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code && soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode && soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
			return soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
		return NULL;
	}
	return soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Detail == NULL)
		{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);
			soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
		}
		return (const char**)&soap->fault->SOAP_ENV__Detail->__any;
	}
	if (soap->fault->detail == NULL)
	{	soap->fault->detail = soap_new_SOAP_ENV__Detail(soap, -1);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
	}
	return (const char**)&soap->fault->detail->__any;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Detail)
		return soap->fault->SOAP_ENV__Detail->__any;
	if (soap->fault->detail)
		return soap->fault->detail->__any;
	return NULL;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	if (soap->version == 1)
	{	for (;;)
		{	if (!soap_getelement(soap, &t))
				if (soap->error || soap_ignore_element(soap))
					break;
		}
	}
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{	(void)type;
	if (soap_peek_element(soap))
		return NULL;
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_ns2__DatoXml:
		return soap_in_ns2__DatoXml(soap, NULL, NULL, "ns2:DatoXml");
	case SOAP_TYPE_ns2__leerBonificacionPrestamos:
		return soap_in_ns2__leerBonificacionPrestamos(soap, NULL, NULL, "ns2:leerBonificacionPrestamos");
	case SOAP_TYPE_ns2__leerBonificacionPrestamosResponse:
		return soap_in_ns2__leerBonificacionPrestamosResponse(soap, NULL, NULL, "ns2:leerBonificacionPrestamosResponse");
	case SOAP_TYPE_ns2__simularReestructuracion:
		return soap_in_ns2__simularReestructuracion(soap, NULL, NULL, "ns2:simularReestructuracion");
	case SOAP_TYPE_ns2__simularReestructuracionResponse:
		return soap_in_ns2__simularReestructuracionResponse(soap, NULL, NULL, "ns2:simularReestructuracionResponse");
	case SOAP_TYPE_ns2__leerMargenCredito01:
		return soap_in_ns2__leerMargenCredito01(soap, NULL, NULL, "ns2:leerMargenCredito01");
	case SOAP_TYPE_ns2__leerMargenCredito01Response:
		return soap_in_ns2__leerMargenCredito01Response(soap, NULL, NULL, "ns2:leerMargenCredito01Response");
	case SOAP_TYPE_ns2__leerCandidatosAumentoLRC:
		return soap_in_ns2__leerCandidatosAumentoLRC(soap, NULL, NULL, "ns2:leerCandidatosAumentoLRC");
	case SOAP_TYPE_ns2__leerCandidatosAumentoLRCResponse:
		return soap_in_ns2__leerCandidatosAumentoLRCResponse(soap, NULL, NULL, "ns2:leerCandidatosAumentoLRCResponse");
	case SOAP_TYPE_ns2__leerConvenios01:
		return soap_in_ns2__leerConvenios01(soap, NULL, NULL, "ns2:leerConvenios01");
	case SOAP_TYPE_ns2__leerConvenios01Response:
		return soap_in_ns2__leerConvenios01Response(soap, NULL, NULL, "ns2:leerConvenios01Response");
	case SOAP_TYPE_ns2__leerImportesTotalesCliente01:
		return soap_in_ns2__leerImportesTotalesCliente01(soap, NULL, NULL, "ns2:leerImportesTotalesCliente01");
	case SOAP_TYPE_ns2__leerImportesTotalesCliente01Response:
		return soap_in_ns2__leerImportesTotalesCliente01Response(soap, NULL, NULL, "ns2:leerImportesTotalesCliente01Response");
	case SOAP_TYPE_ns2__leerCuentasCliente01:
		return soap_in_ns2__leerCuentasCliente01(soap, NULL, NULL, "ns2:leerCuentasCliente01");
	case SOAP_TYPE_ns2__leerCuentasCliente01Response:
		return soap_in_ns2__leerCuentasCliente01Response(soap, NULL, NULL, "ns2:leerCuentasCliente01Response");
	case SOAP_TYPE_ns2__leerCuentaCliente01:
		return soap_in_ns2__leerCuentaCliente01(soap, NULL, NULL, "ns2:leerCuentaCliente01");
	case SOAP_TYPE_ns2__leerCuentaCliente01Response:
		return soap_in_ns2__leerCuentaCliente01Response(soap, NULL, NULL, "ns2:leerCuentaCliente01Response");
	case SOAP_TYPE_ns2__leerCantidadCuentasActivas:
		return soap_in_ns2__leerCantidadCuentasActivas(soap, NULL, NULL, "ns2:leerCantidadCuentasActivas");
	case SOAP_TYPE_ns2__leerCantidadCuentasActivasResponse:
		return soap_in_ns2__leerCantidadCuentasActivasResponse(soap, NULL, NULL, "ns2:leerCantidadCuentasActivasResponse");
	case SOAP_TYPE_ns2__leerConvenios:
		return soap_in_ns2__leerConvenios(soap, NULL, NULL, "ns2:leerConvenios");
	case SOAP_TYPE_ns2__leerConveniosResponse:
		return soap_in_ns2__leerConveniosResponse(soap, NULL, NULL, "ns2:leerConveniosResponse");
	case SOAP_TYPE_ns2__leerMargenCredito:
		return soap_in_ns2__leerMargenCredito(soap, NULL, NULL, "ns2:leerMargenCredito");
	case SOAP_TYPE_ns2__leerMargenCreditoResponse:
		return soap_in_ns2__leerMargenCreditoResponse(soap, NULL, NULL, "ns2:leerMargenCreditoResponse");
	case SOAP_TYPE_ns2__leerImporteCandidatosPrestamos:
		return soap_in_ns2__leerImporteCandidatosPrestamos(soap, NULL, NULL, "ns2:leerImporteCandidatosPrestamos");
	case SOAP_TYPE_ns2__leerImporteCandidatosPrestamosResponse:
		return soap_in_ns2__leerImporteCandidatosPrestamosResponse(soap, NULL, NULL, "ns2:leerImporteCandidatosPrestamosResponse");
	case SOAP_TYPE_ns2__leerImportesTotalesCliente:
		return soap_in_ns2__leerImportesTotalesCliente(soap, NULL, NULL, "ns2:leerImportesTotalesCliente");
	case SOAP_TYPE_ns2__leerImportesTotalesClienteResponse:
		return soap_in_ns2__leerImportesTotalesClienteResponse(soap, NULL, NULL, "ns2:leerImportesTotalesClienteResponse");
	case SOAP_TYPE_ns2__leerCuentaCliente:
		return soap_in_ns2__leerCuentaCliente(soap, NULL, NULL, "ns2:leerCuentaCliente");
	case SOAP_TYPE_ns2__leerCuentaClienteResponse:
		return soap_in_ns2__leerCuentaClienteResponse(soap, NULL, NULL, "ns2:leerCuentaClienteResponse");
	case SOAP_TYPE_ns2__leerCuentasCliente:
		return soap_in_ns2__leerCuentasCliente(soap, NULL, NULL, "ns2:leerCuentasCliente");
	case SOAP_TYPE_ns2__leerCuentasClienteResponse:
		return soap_in_ns2__leerCuentasClienteResponse(soap, NULL, NULL, "ns2:leerCuentasClienteResponse");
	case SOAP_TYPE_ns2__leerDomicilioCliente:
		return soap_in_ns2__leerDomicilioCliente(soap, NULL, NULL, "ns2:leerDomicilioCliente");
	case SOAP_TYPE_ns2__leerDomicilioClienteResponse:
		return soap_in_ns2__leerDomicilioClienteResponse(soap, NULL, NULL, "ns2:leerDomicilioClienteResponse");
	case SOAP_TYPE_ns2__leerDatosCliente:
		return soap_in_ns2__leerDatosCliente(soap, NULL, NULL, "ns2:leerDatosCliente");
	case SOAP_TYPE_ns2__leerDatosClienteResponse:
		return soap_in_ns2__leerDatosClienteResponse(soap, NULL, NULL, "ns2:leerDatosClienteResponse");
	case SOAP_TYPE_ns2__leerClienteCoppel:
		return soap_in_ns2__leerClienteCoppel(soap, NULL, NULL, "ns2:leerClienteCoppel");
	case SOAP_TYPE_ns2__leerClienteCoppelResponse:
		return soap_in_ns2__leerClienteCoppelResponse(soap, NULL, NULL, "ns2:leerClienteCoppelResponse");
	case SOAP_TYPE_PointerTons2__DatoXml:
		return soap_in_PointerTons2__DatoXml(soap, NULL, NULL, "ns2:DatoXml");
	case SOAP_TYPE__QName:
	{	char **s;
		s = soap_in__QName(soap, NULL, NULL, "xsd:QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "ns2:DatoXml"))
		{	*type = SOAP_TYPE_ns2__DatoXml;
			return soap_in_ns2__DatoXml(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:leerBonificacionPrestamos"))
		{	*type = SOAP_TYPE_ns2__leerBonificacionPrestamos;
			return soap_in_ns2__leerBonificacionPrestamos(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:leerBonificacionPrestamosResponse"))
		{	*type = SOAP_TYPE_ns2__leerBonificacionPrestamosResponse;
			return soap_in_ns2__leerBonificacionPrestamosResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:simularReestructuracion"))
		{	*type = SOAP_TYPE_ns2__simularReestructuracion;
			return soap_in_ns2__simularReestructuracion(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:simularReestructuracionResponse"))
		{	*type = SOAP_TYPE_ns2__simularReestructuracionResponse;
			return soap_in_ns2__simularReestructuracionResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:leerMargenCredito01"))
		{	*type = SOAP_TYPE_ns2__leerMargenCredito01;
			return soap_in_ns2__leerMargenCredito01(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:leerMargenCredito01Response"))
		{	*type = SOAP_TYPE_ns2__leerMargenCredito01Response;
			return soap_in_ns2__leerMargenCredito01Response(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:leerCandidatosAumentoLRC"))
		{	*type = SOAP_TYPE_ns2__leerCandidatosAumentoLRC;
			return soap_in_ns2__leerCandidatosAumentoLRC(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:leerCandidatosAumentoLRCResponse"))
		{	*type = SOAP_TYPE_ns2__leerCandidatosAumentoLRCResponse;
			return soap_in_ns2__leerCandidatosAumentoLRCResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:leerConvenios01"))
		{	*type = SOAP_TYPE_ns2__leerConvenios01;
			return soap_in_ns2__leerConvenios01(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:leerConvenios01Response"))
		{	*type = SOAP_TYPE_ns2__leerConvenios01Response;
			return soap_in_ns2__leerConvenios01Response(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:leerImportesTotalesCliente01"))
		{	*type = SOAP_TYPE_ns2__leerImportesTotalesCliente01;
			return soap_in_ns2__leerImportesTotalesCliente01(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:leerImportesTotalesCliente01Response"))
		{	*type = SOAP_TYPE_ns2__leerImportesTotalesCliente01Response;
			return soap_in_ns2__leerImportesTotalesCliente01Response(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:leerCuentasCliente01"))
		{	*type = SOAP_TYPE_ns2__leerCuentasCliente01;
			return soap_in_ns2__leerCuentasCliente01(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:leerCuentasCliente01Response"))
		{	*type = SOAP_TYPE_ns2__leerCuentasCliente01Response;
			return soap_in_ns2__leerCuentasCliente01Response(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:leerCuentaCliente01"))
		{	*type = SOAP_TYPE_ns2__leerCuentaCliente01;
			return soap_in_ns2__leerCuentaCliente01(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:leerCuentaCliente01Response"))
		{	*type = SOAP_TYPE_ns2__leerCuentaCliente01Response;
			return soap_in_ns2__leerCuentaCliente01Response(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:leerCantidadCuentasActivas"))
		{	*type = SOAP_TYPE_ns2__leerCantidadCuentasActivas;
			return soap_in_ns2__leerCantidadCuentasActivas(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:leerCantidadCuentasActivasResponse"))
		{	*type = SOAP_TYPE_ns2__leerCantidadCuentasActivasResponse;
			return soap_in_ns2__leerCantidadCuentasActivasResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:leerConvenios"))
		{	*type = SOAP_TYPE_ns2__leerConvenios;
			return soap_in_ns2__leerConvenios(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:leerConveniosResponse"))
		{	*type = SOAP_TYPE_ns2__leerConveniosResponse;
			return soap_in_ns2__leerConveniosResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:leerMargenCredito"))
		{	*type = SOAP_TYPE_ns2__leerMargenCredito;
			return soap_in_ns2__leerMargenCredito(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:leerMargenCreditoResponse"))
		{	*type = SOAP_TYPE_ns2__leerMargenCreditoResponse;
			return soap_in_ns2__leerMargenCreditoResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:leerImporteCandidatosPrestamos"))
		{	*type = SOAP_TYPE_ns2__leerImporteCandidatosPrestamos;
			return soap_in_ns2__leerImporteCandidatosPrestamos(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:leerImporteCandidatosPrestamosResponse"))
		{	*type = SOAP_TYPE_ns2__leerImporteCandidatosPrestamosResponse;
			return soap_in_ns2__leerImporteCandidatosPrestamosResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:leerImportesTotalesCliente"))
		{	*type = SOAP_TYPE_ns2__leerImportesTotalesCliente;
			return soap_in_ns2__leerImportesTotalesCliente(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:leerImportesTotalesClienteResponse"))
		{	*type = SOAP_TYPE_ns2__leerImportesTotalesClienteResponse;
			return soap_in_ns2__leerImportesTotalesClienteResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:leerCuentaCliente"))
		{	*type = SOAP_TYPE_ns2__leerCuentaCliente;
			return soap_in_ns2__leerCuentaCliente(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:leerCuentaClienteResponse"))
		{	*type = SOAP_TYPE_ns2__leerCuentaClienteResponse;
			return soap_in_ns2__leerCuentaClienteResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:leerCuentasCliente"))
		{	*type = SOAP_TYPE_ns2__leerCuentasCliente;
			return soap_in_ns2__leerCuentasCliente(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:leerCuentasClienteResponse"))
		{	*type = SOAP_TYPE_ns2__leerCuentasClienteResponse;
			return soap_in_ns2__leerCuentasClienteResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:leerDomicilioCliente"))
		{	*type = SOAP_TYPE_ns2__leerDomicilioCliente;
			return soap_in_ns2__leerDomicilioCliente(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:leerDomicilioClienteResponse"))
		{	*type = SOAP_TYPE_ns2__leerDomicilioClienteResponse;
			return soap_in_ns2__leerDomicilioClienteResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:leerDatosCliente"))
		{	*type = SOAP_TYPE_ns2__leerDatosCliente;
			return soap_in_ns2__leerDatosCliente(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:leerDatosClienteResponse"))
		{	*type = SOAP_TYPE_ns2__leerDatosClienteResponse;
			return soap_in_ns2__leerDatosClienteResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:leerClienteCoppel"))
		{	*type = SOAP_TYPE_ns2__leerClienteCoppel;
			return soap_in_ns2__leerClienteCoppel(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:leerClienteCoppelResponse"))
		{	*type = SOAP_TYPE_ns2__leerClienteCoppelResponse;
			return soap_in_ns2__leerClienteCoppelResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
	}
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level=%u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				while (!soap_ignore_element(soap))
					;
				if (soap->error == SOAP_NO_TAG)
					soap->error = soap_element_end_in(soap, NULL);
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, "id", pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{	(void)tag;
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_ns2__DatoXml:
		return ((ns2__DatoXml *)ptr)->soap_out(soap, tag, id, "ns2:DatoXml");
	case SOAP_TYPE_ns2__leerBonificacionPrestamos:
		return soap_out_ns2__leerBonificacionPrestamos(soap, tag, id, (const struct ns2__leerBonificacionPrestamos *)ptr, "ns2:leerBonificacionPrestamos");
	case SOAP_TYPE_ns2__leerBonificacionPrestamosResponse:
		return soap_out_ns2__leerBonificacionPrestamosResponse(soap, tag, id, (const struct ns2__leerBonificacionPrestamosResponse *)ptr, "ns2:leerBonificacionPrestamosResponse");
	case SOAP_TYPE_ns2__simularReestructuracion:
		return soap_out_ns2__simularReestructuracion(soap, tag, id, (const struct ns2__simularReestructuracion *)ptr, "ns2:simularReestructuracion");
	case SOAP_TYPE_ns2__simularReestructuracionResponse:
		return soap_out_ns2__simularReestructuracionResponse(soap, tag, id, (const struct ns2__simularReestructuracionResponse *)ptr, "ns2:simularReestructuracionResponse");
	case SOAP_TYPE_ns2__leerMargenCredito01:
		return soap_out_ns2__leerMargenCredito01(soap, tag, id, (const struct ns2__leerMargenCredito01 *)ptr, "ns2:leerMargenCredito01");
	case SOAP_TYPE_ns2__leerMargenCredito01Response:
		return soap_out_ns2__leerMargenCredito01Response(soap, tag, id, (const struct ns2__leerMargenCredito01Response *)ptr, "ns2:leerMargenCredito01Response");
	case SOAP_TYPE_ns2__leerCandidatosAumentoLRC:
		return soap_out_ns2__leerCandidatosAumentoLRC(soap, tag, id, (const struct ns2__leerCandidatosAumentoLRC *)ptr, "ns2:leerCandidatosAumentoLRC");
	case SOAP_TYPE_ns2__leerCandidatosAumentoLRCResponse:
		return soap_out_ns2__leerCandidatosAumentoLRCResponse(soap, tag, id, (const struct ns2__leerCandidatosAumentoLRCResponse *)ptr, "ns2:leerCandidatosAumentoLRCResponse");
	case SOAP_TYPE_ns2__leerConvenios01:
		return soap_out_ns2__leerConvenios01(soap, tag, id, (const struct ns2__leerConvenios01 *)ptr, "ns2:leerConvenios01");
	case SOAP_TYPE_ns2__leerConvenios01Response:
		return soap_out_ns2__leerConvenios01Response(soap, tag, id, (const struct ns2__leerConvenios01Response *)ptr, "ns2:leerConvenios01Response");
	case SOAP_TYPE_ns2__leerImportesTotalesCliente01:
		return soap_out_ns2__leerImportesTotalesCliente01(soap, tag, id, (const struct ns2__leerImportesTotalesCliente01 *)ptr, "ns2:leerImportesTotalesCliente01");
	case SOAP_TYPE_ns2__leerImportesTotalesCliente01Response:
		return soap_out_ns2__leerImportesTotalesCliente01Response(soap, tag, id, (const struct ns2__leerImportesTotalesCliente01Response *)ptr, "ns2:leerImportesTotalesCliente01Response");
	case SOAP_TYPE_ns2__leerCuentasCliente01:
		return soap_out_ns2__leerCuentasCliente01(soap, tag, id, (const struct ns2__leerCuentasCliente01 *)ptr, "ns2:leerCuentasCliente01");
	case SOAP_TYPE_ns2__leerCuentasCliente01Response:
		return soap_out_ns2__leerCuentasCliente01Response(soap, tag, id, (const struct ns2__leerCuentasCliente01Response *)ptr, "ns2:leerCuentasCliente01Response");
	case SOAP_TYPE_ns2__leerCuentaCliente01:
		return soap_out_ns2__leerCuentaCliente01(soap, tag, id, (const struct ns2__leerCuentaCliente01 *)ptr, "ns2:leerCuentaCliente01");
	case SOAP_TYPE_ns2__leerCuentaCliente01Response:
		return soap_out_ns2__leerCuentaCliente01Response(soap, tag, id, (const struct ns2__leerCuentaCliente01Response *)ptr, "ns2:leerCuentaCliente01Response");
	case SOAP_TYPE_ns2__leerCantidadCuentasActivas:
		return soap_out_ns2__leerCantidadCuentasActivas(soap, tag, id, (const struct ns2__leerCantidadCuentasActivas *)ptr, "ns2:leerCantidadCuentasActivas");
	case SOAP_TYPE_ns2__leerCantidadCuentasActivasResponse:
		return soap_out_ns2__leerCantidadCuentasActivasResponse(soap, tag, id, (const struct ns2__leerCantidadCuentasActivasResponse *)ptr, "ns2:leerCantidadCuentasActivasResponse");
	case SOAP_TYPE_ns2__leerConvenios:
		return soap_out_ns2__leerConvenios(soap, tag, id, (const struct ns2__leerConvenios *)ptr, "ns2:leerConvenios");
	case SOAP_TYPE_ns2__leerConveniosResponse:
		return soap_out_ns2__leerConveniosResponse(soap, tag, id, (const struct ns2__leerConveniosResponse *)ptr, "ns2:leerConveniosResponse");
	case SOAP_TYPE_ns2__leerMargenCredito:
		return soap_out_ns2__leerMargenCredito(soap, tag, id, (const struct ns2__leerMargenCredito *)ptr, "ns2:leerMargenCredito");
	case SOAP_TYPE_ns2__leerMargenCreditoResponse:
		return soap_out_ns2__leerMargenCreditoResponse(soap, tag, id, (const struct ns2__leerMargenCreditoResponse *)ptr, "ns2:leerMargenCreditoResponse");
	case SOAP_TYPE_ns2__leerImporteCandidatosPrestamos:
		return soap_out_ns2__leerImporteCandidatosPrestamos(soap, tag, id, (const struct ns2__leerImporteCandidatosPrestamos *)ptr, "ns2:leerImporteCandidatosPrestamos");
	case SOAP_TYPE_ns2__leerImporteCandidatosPrestamosResponse:
		return soap_out_ns2__leerImporteCandidatosPrestamosResponse(soap, tag, id, (const struct ns2__leerImporteCandidatosPrestamosResponse *)ptr, "ns2:leerImporteCandidatosPrestamosResponse");
	case SOAP_TYPE_ns2__leerImportesTotalesCliente:
		return soap_out_ns2__leerImportesTotalesCliente(soap, tag, id, (const struct ns2__leerImportesTotalesCliente *)ptr, "ns2:leerImportesTotalesCliente");
	case SOAP_TYPE_ns2__leerImportesTotalesClienteResponse:
		return soap_out_ns2__leerImportesTotalesClienteResponse(soap, tag, id, (const struct ns2__leerImportesTotalesClienteResponse *)ptr, "ns2:leerImportesTotalesClienteResponse");
	case SOAP_TYPE_ns2__leerCuentaCliente:
		return soap_out_ns2__leerCuentaCliente(soap, tag, id, (const struct ns2__leerCuentaCliente *)ptr, "ns2:leerCuentaCliente");
	case SOAP_TYPE_ns2__leerCuentaClienteResponse:
		return soap_out_ns2__leerCuentaClienteResponse(soap, tag, id, (const struct ns2__leerCuentaClienteResponse *)ptr, "ns2:leerCuentaClienteResponse");
	case SOAP_TYPE_ns2__leerCuentasCliente:
		return soap_out_ns2__leerCuentasCliente(soap, tag, id, (const struct ns2__leerCuentasCliente *)ptr, "ns2:leerCuentasCliente");
	case SOAP_TYPE_ns2__leerCuentasClienteResponse:
		return soap_out_ns2__leerCuentasClienteResponse(soap, tag, id, (const struct ns2__leerCuentasClienteResponse *)ptr, "ns2:leerCuentasClienteResponse");
	case SOAP_TYPE_ns2__leerDomicilioCliente:
		return soap_out_ns2__leerDomicilioCliente(soap, tag, id, (const struct ns2__leerDomicilioCliente *)ptr, "ns2:leerDomicilioCliente");
	case SOAP_TYPE_ns2__leerDomicilioClienteResponse:
		return soap_out_ns2__leerDomicilioClienteResponse(soap, tag, id, (const struct ns2__leerDomicilioClienteResponse *)ptr, "ns2:leerDomicilioClienteResponse");
	case SOAP_TYPE_ns2__leerDatosCliente:
		return soap_out_ns2__leerDatosCliente(soap, tag, id, (const struct ns2__leerDatosCliente *)ptr, "ns2:leerDatosCliente");
	case SOAP_TYPE_ns2__leerDatosClienteResponse:
		return soap_out_ns2__leerDatosClienteResponse(soap, tag, id, (const struct ns2__leerDatosClienteResponse *)ptr, "ns2:leerDatosClienteResponse");
	case SOAP_TYPE_ns2__leerClienteCoppel:
		return soap_out_ns2__leerClienteCoppel(soap, tag, id, (const struct ns2__leerClienteCoppel *)ptr, "ns2:leerClienteCoppel");
	case SOAP_TYPE_ns2__leerClienteCoppelResponse:
		return soap_out_ns2__leerClienteCoppelResponse(soap, tag, id, (const struct ns2__leerClienteCoppelResponse *)ptr, "ns2:leerClienteCoppelResponse");
	case SOAP_TYPE_PointerTons2__DatoXml:
		return soap_out_PointerTons2__DatoXml(soap, tag, id, (ns2__DatoXml *const*)ptr, "ns2:DatoXml");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:QName");
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:string");
	}
	return SOAP_OK;
}

#ifdef __cplusplus
}
#endif
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE_ns2__DatoXml:
		((ns2__DatoXml *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns2__leerBonificacionPrestamos:
		soap_serialize_ns2__leerBonificacionPrestamos(soap, (const struct ns2__leerBonificacionPrestamos *)ptr);
		break;
	case SOAP_TYPE_ns2__leerBonificacionPrestamosResponse:
		soap_serialize_ns2__leerBonificacionPrestamosResponse(soap, (const struct ns2__leerBonificacionPrestamosResponse *)ptr);
		break;
	case SOAP_TYPE_ns2__simularReestructuracion:
		soap_serialize_ns2__simularReestructuracion(soap, (const struct ns2__simularReestructuracion *)ptr);
		break;
	case SOAP_TYPE_ns2__simularReestructuracionResponse:
		soap_serialize_ns2__simularReestructuracionResponse(soap, (const struct ns2__simularReestructuracionResponse *)ptr);
		break;
	case SOAP_TYPE_ns2__leerMargenCredito01:
		soap_serialize_ns2__leerMargenCredito01(soap, (const struct ns2__leerMargenCredito01 *)ptr);
		break;
	case SOAP_TYPE_ns2__leerMargenCredito01Response:
		soap_serialize_ns2__leerMargenCredito01Response(soap, (const struct ns2__leerMargenCredito01Response *)ptr);
		break;
	case SOAP_TYPE_ns2__leerCandidatosAumentoLRC:
		soap_serialize_ns2__leerCandidatosAumentoLRC(soap, (const struct ns2__leerCandidatosAumentoLRC *)ptr);
		break;
	case SOAP_TYPE_ns2__leerCandidatosAumentoLRCResponse:
		soap_serialize_ns2__leerCandidatosAumentoLRCResponse(soap, (const struct ns2__leerCandidatosAumentoLRCResponse *)ptr);
		break;
	case SOAP_TYPE_ns2__leerConvenios01:
		soap_serialize_ns2__leerConvenios01(soap, (const struct ns2__leerConvenios01 *)ptr);
		break;
	case SOAP_TYPE_ns2__leerConvenios01Response:
		soap_serialize_ns2__leerConvenios01Response(soap, (const struct ns2__leerConvenios01Response *)ptr);
		break;
	case SOAP_TYPE_ns2__leerImportesTotalesCliente01:
		soap_serialize_ns2__leerImportesTotalesCliente01(soap, (const struct ns2__leerImportesTotalesCliente01 *)ptr);
		break;
	case SOAP_TYPE_ns2__leerImportesTotalesCliente01Response:
		soap_serialize_ns2__leerImportesTotalesCliente01Response(soap, (const struct ns2__leerImportesTotalesCliente01Response *)ptr);
		break;
	case SOAP_TYPE_ns2__leerCuentasCliente01:
		soap_serialize_ns2__leerCuentasCliente01(soap, (const struct ns2__leerCuentasCliente01 *)ptr);
		break;
	case SOAP_TYPE_ns2__leerCuentasCliente01Response:
		soap_serialize_ns2__leerCuentasCliente01Response(soap, (const struct ns2__leerCuentasCliente01Response *)ptr);
		break;
	case SOAP_TYPE_ns2__leerCuentaCliente01:
		soap_serialize_ns2__leerCuentaCliente01(soap, (const struct ns2__leerCuentaCliente01 *)ptr);
		break;
	case SOAP_TYPE_ns2__leerCuentaCliente01Response:
		soap_serialize_ns2__leerCuentaCliente01Response(soap, (const struct ns2__leerCuentaCliente01Response *)ptr);
		break;
	case SOAP_TYPE_ns2__leerCantidadCuentasActivas:
		soap_serialize_ns2__leerCantidadCuentasActivas(soap, (const struct ns2__leerCantidadCuentasActivas *)ptr);
		break;
	case SOAP_TYPE_ns2__leerCantidadCuentasActivasResponse:
		soap_serialize_ns2__leerCantidadCuentasActivasResponse(soap, (const struct ns2__leerCantidadCuentasActivasResponse *)ptr);
		break;
	case SOAP_TYPE_ns2__leerConvenios:
		soap_serialize_ns2__leerConvenios(soap, (const struct ns2__leerConvenios *)ptr);
		break;
	case SOAP_TYPE_ns2__leerConveniosResponse:
		soap_serialize_ns2__leerConveniosResponse(soap, (const struct ns2__leerConveniosResponse *)ptr);
		break;
	case SOAP_TYPE_ns2__leerMargenCredito:
		soap_serialize_ns2__leerMargenCredito(soap, (const struct ns2__leerMargenCredito *)ptr);
		break;
	case SOAP_TYPE_ns2__leerMargenCreditoResponse:
		soap_serialize_ns2__leerMargenCreditoResponse(soap, (const struct ns2__leerMargenCreditoResponse *)ptr);
		break;
	case SOAP_TYPE_ns2__leerImporteCandidatosPrestamos:
		soap_serialize_ns2__leerImporteCandidatosPrestamos(soap, (const struct ns2__leerImporteCandidatosPrestamos *)ptr);
		break;
	case SOAP_TYPE_ns2__leerImporteCandidatosPrestamosResponse:
		soap_serialize_ns2__leerImporteCandidatosPrestamosResponse(soap, (const struct ns2__leerImporteCandidatosPrestamosResponse *)ptr);
		break;
	case SOAP_TYPE_ns2__leerImportesTotalesCliente:
		soap_serialize_ns2__leerImportesTotalesCliente(soap, (const struct ns2__leerImportesTotalesCliente *)ptr);
		break;
	case SOAP_TYPE_ns2__leerImportesTotalesClienteResponse:
		soap_serialize_ns2__leerImportesTotalesClienteResponse(soap, (const struct ns2__leerImportesTotalesClienteResponse *)ptr);
		break;
	case SOAP_TYPE_ns2__leerCuentaCliente:
		soap_serialize_ns2__leerCuentaCliente(soap, (const struct ns2__leerCuentaCliente *)ptr);
		break;
	case SOAP_TYPE_ns2__leerCuentaClienteResponse:
		soap_serialize_ns2__leerCuentaClienteResponse(soap, (const struct ns2__leerCuentaClienteResponse *)ptr);
		break;
	case SOAP_TYPE_ns2__leerCuentasCliente:
		soap_serialize_ns2__leerCuentasCliente(soap, (const struct ns2__leerCuentasCliente *)ptr);
		break;
	case SOAP_TYPE_ns2__leerCuentasClienteResponse:
		soap_serialize_ns2__leerCuentasClienteResponse(soap, (const struct ns2__leerCuentasClienteResponse *)ptr);
		break;
	case SOAP_TYPE_ns2__leerDomicilioCliente:
		soap_serialize_ns2__leerDomicilioCliente(soap, (const struct ns2__leerDomicilioCliente *)ptr);
		break;
	case SOAP_TYPE_ns2__leerDomicilioClienteResponse:
		soap_serialize_ns2__leerDomicilioClienteResponse(soap, (const struct ns2__leerDomicilioClienteResponse *)ptr);
		break;
	case SOAP_TYPE_ns2__leerDatosCliente:
		soap_serialize_ns2__leerDatosCliente(soap, (const struct ns2__leerDatosCliente *)ptr);
		break;
	case SOAP_TYPE_ns2__leerDatosClienteResponse:
		soap_serialize_ns2__leerDatosClienteResponse(soap, (const struct ns2__leerDatosClienteResponse *)ptr);
		break;
	case SOAP_TYPE_ns2__leerClienteCoppel:
		soap_serialize_ns2__leerClienteCoppel(soap, (const struct ns2__leerClienteCoppel *)ptr);
		break;
	case SOAP_TYPE_ns2__leerClienteCoppelResponse:
		soap_serialize_ns2__leerClienteCoppelResponse(soap, (const struct ns2__leerClienteCoppelResponse *)ptr);
		break;
	case SOAP_TYPE_PointerTons2__DatoXml:
		soap_serialize_PointerTons2__DatoXml(soap, (ns2__DatoXml *const*)ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	}
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{	(void)type;
	switch (t)
	{
	case SOAP_TYPE_ns2__DatoXml:
		return (void*)soap_instantiate_ns2__DatoXml(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__leerClienteCoppelResponse:
		return (void*)soap_instantiate_ns2__leerClienteCoppelResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__leerClienteCoppel:
		return (void*)soap_instantiate_ns2__leerClienteCoppel(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__leerDatosClienteResponse:
		return (void*)soap_instantiate_ns2__leerDatosClienteResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__leerDatosCliente:
		return (void*)soap_instantiate_ns2__leerDatosCliente(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__leerDomicilioClienteResponse:
		return (void*)soap_instantiate_ns2__leerDomicilioClienteResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__leerDomicilioCliente:
		return (void*)soap_instantiate_ns2__leerDomicilioCliente(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__leerCuentasClienteResponse:
		return (void*)soap_instantiate_ns2__leerCuentasClienteResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__leerCuentasCliente:
		return (void*)soap_instantiate_ns2__leerCuentasCliente(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__leerCuentaClienteResponse:
		return (void*)soap_instantiate_ns2__leerCuentaClienteResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__leerCuentaCliente:
		return (void*)soap_instantiate_ns2__leerCuentaCliente(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__leerImportesTotalesClienteResponse:
		return (void*)soap_instantiate_ns2__leerImportesTotalesClienteResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__leerImportesTotalesCliente:
		return (void*)soap_instantiate_ns2__leerImportesTotalesCliente(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__leerImporteCandidatosPrestamosResponse:
		return (void*)soap_instantiate_ns2__leerImporteCandidatosPrestamosResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__leerImporteCandidatosPrestamos:
		return (void*)soap_instantiate_ns2__leerImporteCandidatosPrestamos(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__leerMargenCreditoResponse:
		return (void*)soap_instantiate_ns2__leerMargenCreditoResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__leerMargenCredito:
		return (void*)soap_instantiate_ns2__leerMargenCredito(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__leerConveniosResponse:
		return (void*)soap_instantiate_ns2__leerConveniosResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__leerConvenios:
		return (void*)soap_instantiate_ns2__leerConvenios(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__leerCantidadCuentasActivasResponse:
		return (void*)soap_instantiate_ns2__leerCantidadCuentasActivasResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__leerCantidadCuentasActivas:
		return (void*)soap_instantiate_ns2__leerCantidadCuentasActivas(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__leerCuentaCliente01Response:
		return (void*)soap_instantiate_ns2__leerCuentaCliente01Response(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__leerCuentaCliente01:
		return (void*)soap_instantiate_ns2__leerCuentaCliente01(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__leerCuentasCliente01Response:
		return (void*)soap_instantiate_ns2__leerCuentasCliente01Response(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__leerCuentasCliente01:
		return (void*)soap_instantiate_ns2__leerCuentasCliente01(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__leerImportesTotalesCliente01Response:
		return (void*)soap_instantiate_ns2__leerImportesTotalesCliente01Response(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__leerImportesTotalesCliente01:
		return (void*)soap_instantiate_ns2__leerImportesTotalesCliente01(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__leerConvenios01Response:
		return (void*)soap_instantiate_ns2__leerConvenios01Response(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__leerConvenios01:
		return (void*)soap_instantiate_ns2__leerConvenios01(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__leerCandidatosAumentoLRCResponse:
		return (void*)soap_instantiate_ns2__leerCandidatosAumentoLRCResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__leerCandidatosAumentoLRC:
		return (void*)soap_instantiate_ns2__leerCandidatosAumentoLRC(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__leerMargenCredito01Response:
		return (void*)soap_instantiate_ns2__leerMargenCredito01Response(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__leerMargenCredito01:
		return (void*)soap_instantiate_ns2__leerMargenCredito01(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__simularReestructuracionResponse:
		return (void*)soap_instantiate_ns2__simularReestructuracionResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__simularReestructuracion:
		return (void*)soap_instantiate_ns2__simularReestructuracion(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__leerBonificacionPrestamosResponse:
		return (void*)soap_instantiate_ns2__leerBonificacionPrestamosResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__leerBonificacionPrestamos:
		return (void*)soap_instantiate_ns2__leerBonificacionPrestamos(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE_ns2__DatoXml:
		if (p->size < 0)
			SOAP_DELETE((ns2__DatoXml*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns2__DatoXml*)p->ptr);
		break;
	case SOAP_TYPE_ns2__leerClienteCoppelResponse:
		if (p->size < 0)
			SOAP_DELETE((struct ns2__leerClienteCoppelResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns2__leerClienteCoppelResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns2__leerClienteCoppel:
		if (p->size < 0)
			SOAP_DELETE((struct ns2__leerClienteCoppel*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns2__leerClienteCoppel*)p->ptr);
		break;
	case SOAP_TYPE_ns2__leerDatosClienteResponse:
		if (p->size < 0)
			SOAP_DELETE((struct ns2__leerDatosClienteResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns2__leerDatosClienteResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns2__leerDatosCliente:
		if (p->size < 0)
			SOAP_DELETE((struct ns2__leerDatosCliente*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns2__leerDatosCliente*)p->ptr);
		break;
	case SOAP_TYPE_ns2__leerDomicilioClienteResponse:
		if (p->size < 0)
			SOAP_DELETE((struct ns2__leerDomicilioClienteResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns2__leerDomicilioClienteResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns2__leerDomicilioCliente:
		if (p->size < 0)
			SOAP_DELETE((struct ns2__leerDomicilioCliente*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns2__leerDomicilioCliente*)p->ptr);
		break;
	case SOAP_TYPE_ns2__leerCuentasClienteResponse:
		if (p->size < 0)
			SOAP_DELETE((struct ns2__leerCuentasClienteResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns2__leerCuentasClienteResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns2__leerCuentasCliente:
		if (p->size < 0)
			SOAP_DELETE((struct ns2__leerCuentasCliente*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns2__leerCuentasCliente*)p->ptr);
		break;
	case SOAP_TYPE_ns2__leerCuentaClienteResponse:
		if (p->size < 0)
			SOAP_DELETE((struct ns2__leerCuentaClienteResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns2__leerCuentaClienteResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns2__leerCuentaCliente:
		if (p->size < 0)
			SOAP_DELETE((struct ns2__leerCuentaCliente*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns2__leerCuentaCliente*)p->ptr);
		break;
	case SOAP_TYPE_ns2__leerImportesTotalesClienteResponse:
		if (p->size < 0)
			SOAP_DELETE((struct ns2__leerImportesTotalesClienteResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns2__leerImportesTotalesClienteResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns2__leerImportesTotalesCliente:
		if (p->size < 0)
			SOAP_DELETE((struct ns2__leerImportesTotalesCliente*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns2__leerImportesTotalesCliente*)p->ptr);
		break;
	case SOAP_TYPE_ns2__leerImporteCandidatosPrestamosResponse:
		if (p->size < 0)
			SOAP_DELETE((struct ns2__leerImporteCandidatosPrestamosResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns2__leerImporteCandidatosPrestamosResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns2__leerImporteCandidatosPrestamos:
		if (p->size < 0)
			SOAP_DELETE((struct ns2__leerImporteCandidatosPrestamos*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns2__leerImporteCandidatosPrestamos*)p->ptr);
		break;
	case SOAP_TYPE_ns2__leerMargenCreditoResponse:
		if (p->size < 0)
			SOAP_DELETE((struct ns2__leerMargenCreditoResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns2__leerMargenCreditoResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns2__leerMargenCredito:
		if (p->size < 0)
			SOAP_DELETE((struct ns2__leerMargenCredito*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns2__leerMargenCredito*)p->ptr);
		break;
	case SOAP_TYPE_ns2__leerConveniosResponse:
		if (p->size < 0)
			SOAP_DELETE((struct ns2__leerConveniosResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns2__leerConveniosResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns2__leerConvenios:
		if (p->size < 0)
			SOAP_DELETE((struct ns2__leerConvenios*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns2__leerConvenios*)p->ptr);
		break;
	case SOAP_TYPE_ns2__leerCantidadCuentasActivasResponse:
		if (p->size < 0)
			SOAP_DELETE((struct ns2__leerCantidadCuentasActivasResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns2__leerCantidadCuentasActivasResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns2__leerCantidadCuentasActivas:
		if (p->size < 0)
			SOAP_DELETE((struct ns2__leerCantidadCuentasActivas*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns2__leerCantidadCuentasActivas*)p->ptr);
		break;
	case SOAP_TYPE_ns2__leerCuentaCliente01Response:
		if (p->size < 0)
			SOAP_DELETE((struct ns2__leerCuentaCliente01Response*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns2__leerCuentaCliente01Response*)p->ptr);
		break;
	case SOAP_TYPE_ns2__leerCuentaCliente01:
		if (p->size < 0)
			SOAP_DELETE((struct ns2__leerCuentaCliente01*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns2__leerCuentaCliente01*)p->ptr);
		break;
	case SOAP_TYPE_ns2__leerCuentasCliente01Response:
		if (p->size < 0)
			SOAP_DELETE((struct ns2__leerCuentasCliente01Response*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns2__leerCuentasCliente01Response*)p->ptr);
		break;
	case SOAP_TYPE_ns2__leerCuentasCliente01:
		if (p->size < 0)
			SOAP_DELETE((struct ns2__leerCuentasCliente01*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns2__leerCuentasCliente01*)p->ptr);
		break;
	case SOAP_TYPE_ns2__leerImportesTotalesCliente01Response:
		if (p->size < 0)
			SOAP_DELETE((struct ns2__leerImportesTotalesCliente01Response*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns2__leerImportesTotalesCliente01Response*)p->ptr);
		break;
	case SOAP_TYPE_ns2__leerImportesTotalesCliente01:
		if (p->size < 0)
			SOAP_DELETE((struct ns2__leerImportesTotalesCliente01*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns2__leerImportesTotalesCliente01*)p->ptr);
		break;
	case SOAP_TYPE_ns2__leerConvenios01Response:
		if (p->size < 0)
			SOAP_DELETE((struct ns2__leerConvenios01Response*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns2__leerConvenios01Response*)p->ptr);
		break;
	case SOAP_TYPE_ns2__leerConvenios01:
		if (p->size < 0)
			SOAP_DELETE((struct ns2__leerConvenios01*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns2__leerConvenios01*)p->ptr);
		break;
	case SOAP_TYPE_ns2__leerCandidatosAumentoLRCResponse:
		if (p->size < 0)
			SOAP_DELETE((struct ns2__leerCandidatosAumentoLRCResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns2__leerCandidatosAumentoLRCResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns2__leerCandidatosAumentoLRC:
		if (p->size < 0)
			SOAP_DELETE((struct ns2__leerCandidatosAumentoLRC*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns2__leerCandidatosAumentoLRC*)p->ptr);
		break;
	case SOAP_TYPE_ns2__leerMargenCredito01Response:
		if (p->size < 0)
			SOAP_DELETE((struct ns2__leerMargenCredito01Response*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns2__leerMargenCredito01Response*)p->ptr);
		break;
	case SOAP_TYPE_ns2__leerMargenCredito01:
		if (p->size < 0)
			SOAP_DELETE((struct ns2__leerMargenCredito01*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns2__leerMargenCredito01*)p->ptr);
		break;
	case SOAP_TYPE_ns2__simularReestructuracionResponse:
		if (p->size < 0)
			SOAP_DELETE((struct ns2__simularReestructuracionResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns2__simularReestructuracionResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns2__simularReestructuracion:
		if (p->size < 0)
			SOAP_DELETE((struct ns2__simularReestructuracion*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns2__simularReestructuracion*)p->ptr);
		break;
	case SOAP_TYPE_ns2__leerBonificacionPrestamosResponse:
		if (p->size < 0)
			SOAP_DELETE((struct ns2__leerBonificacionPrestamosResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns2__leerBonificacionPrestamosResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns2__leerBonificacionPrestamos:
		if (p->size < 0)
			SOAP_DELETE((struct ns2__leerBonificacionPrestamos*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns2__leerBonificacionPrestamos*)p->ptr);
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Header*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Header*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Code*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Code*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Detail*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Detail*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Reason*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Reason*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Fault*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Fault*)p->ptr);
		break;
#endif
	default:	return SOAP_ERR;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap *soap, const char *id, void *p, int t, size_t n, const char *type, const char *arrayType)
{	return soap_id_enter(soap, id, p, t, n, 0, type, arrayType, soap_instantiate);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{	char *p;
	p = soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_byte);
	if (soap_out_byte(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{	int *p;
	p = soap_inint(soap, tag, a, type, SOAP_TYPE_int);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_int);
	if (soap_out_int(soap, tag?tag:"int", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns2__DatoXml::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->ns2__DatoXml::Respuesta);
	/* transient soap skipped */
}

void ns2__DatoXml::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_string(soap, &this->ns2__DatoXml::Respuesta);
	/* transient soap skipped */
}

int ns2__DatoXml::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns2__DatoXml(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__DatoXml(struct soap *soap, const char *tag, int id, const ns2__DatoXml *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__DatoXml), type))
		return soap->error;
	if (soap_out_string(soap, "Respuesta", -1, &(a->ns2__DatoXml::Respuesta), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns2__DatoXml::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns2__DatoXml(soap, tag, this, type);
}

SOAP_FMAC3 ns2__DatoXml * SOAP_FMAC4 soap_in_ns2__DatoXml(struct soap *soap, const char *tag, ns2__DatoXml *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns2__DatoXml *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__DatoXml, sizeof(ns2__DatoXml), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns2__DatoXml)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns2__DatoXml *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Respuesta1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Respuesta1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "Respuesta", &(a->ns2__DatoXml::Respuesta), "xsd:string"))
				{	soap_flag_Respuesta1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns2__DatoXml *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__DatoXml, 0, sizeof(ns2__DatoXml), 0, soap_copy_ns2__DatoXml);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns2__DatoXml::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns2__DatoXml);
	if (this->soap_out(soap, tag?tag:"ns2:DatoXml", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns2__DatoXml::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns2__DatoXml(soap, this, tag, type);
}

SOAP_FMAC3 ns2__DatoXml * SOAP_FMAC4 soap_get_ns2__DatoXml(struct soap *soap, ns2__DatoXml *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__DatoXml(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns2__DatoXml * SOAP_FMAC2 soap_instantiate_ns2__DatoXml(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__DatoXml(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__DatoXml, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns2__DatoXml);
		if (size)
			*size = sizeof(ns2__DatoXml);
		((ns2__DatoXml*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns2__DatoXml, n);
		if (size)
			*size = n * sizeof(ns2__DatoXml);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns2__DatoXml*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns2__DatoXml*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__DatoXml(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns2__DatoXml %p -> %p\n", q, p));
	*(ns2__DatoXml*)p = *(ns2__DatoXml*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->faultcode);
	soap_serialize_string(soap, &a->faultstring);
	soap_serialize_string(soap, &a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, &a->SOAP_ENV__Node);
	soap_serialize_string(soap, &a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, &a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, &a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, &a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, &a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "faultcode", &a->faultcode, ""))
				{	soap_flag_faultcode--;
					continue;
				}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultstring", &a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultactor", &a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Node", &a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Role", &a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, 0, sizeof(struct SOAP_ENV__Fault), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Fault);
	if (soap_out_SOAP_ENV__Fault(soap, tag?tag:"SOAP-ENV:Fault", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Fault, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Fault);
		if (size)
			*size = sizeof(struct SOAP_ENV__Fault);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Fault, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Fault);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Fault*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Fault %p -> %p\n", q, p));
	*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang, 1);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, &a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Text", &a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, 0, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Reason);
	if (soap_out_SOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Reason, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Reason);
		if (size)
			*size = sizeof(struct SOAP_ENV__Reason);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Reason, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Reason);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Reason*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Reason %p -> %p\n", q, p));
	*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__any = NULL;
	a->__type = 0;
	a->fault = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_markelement(soap, a->fault, a->__type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))
		return soap->error;
	soap_outliteral(soap, "-any", &a->__any, NULL);
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag___any = 1;
	size_t soap_flag_fault = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
				if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, 0, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Detail);
	if (soap_out_SOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Detail, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Detail);
		if (size)
			*size = sizeof(struct SOAP_ENV__Detail);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Detail, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Detail);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Detail*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Detail %p -> %p\n", q, p));
	*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "SOAP-ENV:Value", &a->SOAP_ENV__Value, ""))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, 0, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Code);
	if (soap_out_SOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Code, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Code);
		if (size)
			*size = sizeof(struct SOAP_ENV__Code);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Code, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Code);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Code*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Code %p -> %p\n", q, p));
	*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, 0, sizeof(struct SOAP_ENV__Header), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Header);
	if (soap_out_SOAP_ENV__Header(soap, tag?tag:"SOAP-ENV:Header", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Header, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Header);
		if (size)
			*size = sizeof(struct SOAP_ENV__Header);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Header, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Header);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Header*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Header %p -> %p\n", q, p));
	*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__leerBonificacionPrestamos(struct soap *soap, struct ns2__leerBonificacionPrestamos *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->cDias);
	soap_default_string(soap, &a->cInteresprestamo);
	soap_default_string(soap, &a->cIplazo);
	soap_default_string(soap, &a->cFechaPrestamo);
	soap_default_string(soap, &a->cIpCartera);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__leerBonificacionPrestamos(struct soap *soap, const struct ns2__leerBonificacionPrestamos *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->cDias);
	soap_serialize_string(soap, &a->cInteresprestamo);
	soap_serialize_string(soap, &a->cIplazo);
	soap_serialize_string(soap, &a->cFechaPrestamo);
	soap_serialize_string(soap, &a->cIpCartera);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__leerBonificacionPrestamos(struct soap *soap, const char *tag, int id, const struct ns2__leerBonificacionPrestamos *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__leerBonificacionPrestamos), type))
		return soap->error;
	if (soap_out_string(soap, "cDias", -1, &a->cDias, ""))
		return soap->error;
	if (soap_out_string(soap, "cInteresprestamo", -1, &a->cInteresprestamo, ""))
		return soap->error;
	if (soap_out_string(soap, "cIplazo", -1, &a->cIplazo, ""))
		return soap->error;
	if (soap_out_string(soap, "cFechaPrestamo", -1, &a->cFechaPrestamo, ""))
		return soap->error;
	if (soap_out_string(soap, "cIpCartera", -1, &a->cIpCartera, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__leerBonificacionPrestamos * SOAP_FMAC4 soap_in_ns2__leerBonificacionPrestamos(struct soap *soap, const char *tag, struct ns2__leerBonificacionPrestamos *a, const char *type)
{
	size_t soap_flag_cDias = 1;
	size_t soap_flag_cInteresprestamo = 1;
	size_t soap_flag_cIplazo = 1;
	size_t soap_flag_cFechaPrestamo = 1;
	size_t soap_flag_cIpCartera = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__leerBonificacionPrestamos *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__leerBonificacionPrestamos, sizeof(struct ns2__leerBonificacionPrestamos), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__leerBonificacionPrestamos(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_cDias && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "cDias", &a->cDias, "xsd:string"))
				{	soap_flag_cDias--;
					continue;
				}
			if (soap_flag_cInteresprestamo && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "cInteresprestamo", &a->cInteresprestamo, "xsd:string"))
				{	soap_flag_cInteresprestamo--;
					continue;
				}
			if (soap_flag_cIplazo && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "cIplazo", &a->cIplazo, "xsd:string"))
				{	soap_flag_cIplazo--;
					continue;
				}
			if (soap_flag_cFechaPrestamo && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "cFechaPrestamo", &a->cFechaPrestamo, "xsd:string"))
				{	soap_flag_cFechaPrestamo--;
					continue;
				}
			if (soap_flag_cIpCartera && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "cIpCartera", &a->cIpCartera, "xsd:string"))
				{	soap_flag_cIpCartera--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__leerBonificacionPrestamos *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__leerBonificacionPrestamos, 0, sizeof(struct ns2__leerBonificacionPrestamos), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__leerBonificacionPrestamos(struct soap *soap, const struct ns2__leerBonificacionPrestamos *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__leerBonificacionPrestamos);
	if (soap_out_ns2__leerBonificacionPrestamos(soap, tag?tag:"ns2:leerBonificacionPrestamos", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__leerBonificacionPrestamos * SOAP_FMAC4 soap_get_ns2__leerBonificacionPrestamos(struct soap *soap, struct ns2__leerBonificacionPrestamos *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__leerBonificacionPrestamos(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns2__leerBonificacionPrestamos * SOAP_FMAC2 soap_instantiate_ns2__leerBonificacionPrestamos(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__leerBonificacionPrestamos(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__leerBonificacionPrestamos, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns2__leerBonificacionPrestamos);
		if (size)
			*size = sizeof(struct ns2__leerBonificacionPrestamos);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns2__leerBonificacionPrestamos, n);
		if (size)
			*size = n * sizeof(struct ns2__leerBonificacionPrestamos);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns2__leerBonificacionPrestamos*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__leerBonificacionPrestamos(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns2__leerBonificacionPrestamos %p -> %p\n", q, p));
	*(struct ns2__leerBonificacionPrestamos*)p = *(struct ns2__leerBonificacionPrestamos*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__leerBonificacionPrestamosResponse(struct soap *soap, struct ns2__leerBonificacionPrestamosResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->datos = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__leerBonificacionPrestamosResponse(struct soap *soap, const struct ns2__leerBonificacionPrestamosResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTons2__DatoXml(soap, &a->datos);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__leerBonificacionPrestamosResponse(struct soap *soap, const char *tag, int id, const struct ns2__leerBonificacionPrestamosResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__leerBonificacionPrestamosResponse), type))
		return soap->error;
	if (soap_out_PointerTons2__DatoXml(soap, "datos", -1, &a->datos, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__leerBonificacionPrestamosResponse * SOAP_FMAC4 soap_in_ns2__leerBonificacionPrestamosResponse(struct soap *soap, const char *tag, struct ns2__leerBonificacionPrestamosResponse *a, const char *type)
{
	size_t soap_flag_datos = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__leerBonificacionPrestamosResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__leerBonificacionPrestamosResponse, sizeof(struct ns2__leerBonificacionPrestamosResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__leerBonificacionPrestamosResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_datos && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons2__DatoXml(soap, "datos", &a->datos, "ns2:DatoXml"))
				{	soap_flag_datos--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__leerBonificacionPrestamosResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__leerBonificacionPrestamosResponse, 0, sizeof(struct ns2__leerBonificacionPrestamosResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__leerBonificacionPrestamosResponse(struct soap *soap, const struct ns2__leerBonificacionPrestamosResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__leerBonificacionPrestamosResponse);
	if (soap_out_ns2__leerBonificacionPrestamosResponse(soap, tag?tag:"ns2:leerBonificacionPrestamosResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__leerBonificacionPrestamosResponse * SOAP_FMAC4 soap_get_ns2__leerBonificacionPrestamosResponse(struct soap *soap, struct ns2__leerBonificacionPrestamosResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__leerBonificacionPrestamosResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns2__leerBonificacionPrestamosResponse * SOAP_FMAC2 soap_instantiate_ns2__leerBonificacionPrestamosResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__leerBonificacionPrestamosResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__leerBonificacionPrestamosResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns2__leerBonificacionPrestamosResponse);
		if (size)
			*size = sizeof(struct ns2__leerBonificacionPrestamosResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns2__leerBonificacionPrestamosResponse, n);
		if (size)
			*size = n * sizeof(struct ns2__leerBonificacionPrestamosResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns2__leerBonificacionPrestamosResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__leerBonificacionPrestamosResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns2__leerBonificacionPrestamosResponse %p -> %p\n", q, p));
	*(struct ns2__leerBonificacionPrestamosResponse*)p = *(struct ns2__leerBonificacionPrestamosResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__simularReestructuracion(struct soap *soap, struct ns2__simularReestructuracion *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->numerocliente);
	soap_default_string(soap, &a->Fecha);
	soap_default_string(soap, &a->cIpCartera);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__simularReestructuracion(struct soap *soap, const struct ns2__simularReestructuracion *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->Fecha);
	soap_serialize_string(soap, &a->cIpCartera);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__simularReestructuracion(struct soap *soap, const char *tag, int id, const struct ns2__simularReestructuracion *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__simularReestructuracion), type))
		return soap->error;
	if (soap_out_int(soap, "numerocliente", -1, &a->numerocliente, ""))
		return soap->error;
	if (soap_out_string(soap, "Fecha", -1, &a->Fecha, ""))
		return soap->error;
	if (soap_out_string(soap, "cIpCartera", -1, &a->cIpCartera, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__simularReestructuracion * SOAP_FMAC4 soap_in_ns2__simularReestructuracion(struct soap *soap, const char *tag, struct ns2__simularReestructuracion *a, const char *type)
{
	size_t soap_flag_numerocliente = 1;
	size_t soap_flag_Fecha = 1;
	size_t soap_flag_cIpCartera = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__simularReestructuracion *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__simularReestructuracion, sizeof(struct ns2__simularReestructuracion), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__simularReestructuracion(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_numerocliente && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "numerocliente", &a->numerocliente, "xsd:int"))
				{	soap_flag_numerocliente--;
					continue;
				}
			if (soap_flag_Fecha && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "Fecha", &a->Fecha, "xsd:string"))
				{	soap_flag_Fecha--;
					continue;
				}
			if (soap_flag_cIpCartera && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "cIpCartera", &a->cIpCartera, "xsd:string"))
				{	soap_flag_cIpCartera--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__simularReestructuracion *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__simularReestructuracion, 0, sizeof(struct ns2__simularReestructuracion), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_numerocliente > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__simularReestructuracion(struct soap *soap, const struct ns2__simularReestructuracion *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__simularReestructuracion);
	if (soap_out_ns2__simularReestructuracion(soap, tag?tag:"ns2:simularReestructuracion", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__simularReestructuracion * SOAP_FMAC4 soap_get_ns2__simularReestructuracion(struct soap *soap, struct ns2__simularReestructuracion *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__simularReestructuracion(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns2__simularReestructuracion * SOAP_FMAC2 soap_instantiate_ns2__simularReestructuracion(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__simularReestructuracion(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__simularReestructuracion, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns2__simularReestructuracion);
		if (size)
			*size = sizeof(struct ns2__simularReestructuracion);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns2__simularReestructuracion, n);
		if (size)
			*size = n * sizeof(struct ns2__simularReestructuracion);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns2__simularReestructuracion*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__simularReestructuracion(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns2__simularReestructuracion %p -> %p\n", q, p));
	*(struct ns2__simularReestructuracion*)p = *(struct ns2__simularReestructuracion*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__simularReestructuracionResponse(struct soap *soap, struct ns2__simularReestructuracionResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->datos = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__simularReestructuracionResponse(struct soap *soap, const struct ns2__simularReestructuracionResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTons2__DatoXml(soap, &a->datos);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__simularReestructuracionResponse(struct soap *soap, const char *tag, int id, const struct ns2__simularReestructuracionResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__simularReestructuracionResponse), type))
		return soap->error;
	if (soap_out_PointerTons2__DatoXml(soap, "datos", -1, &a->datos, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__simularReestructuracionResponse * SOAP_FMAC4 soap_in_ns2__simularReestructuracionResponse(struct soap *soap, const char *tag, struct ns2__simularReestructuracionResponse *a, const char *type)
{
	size_t soap_flag_datos = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__simularReestructuracionResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__simularReestructuracionResponse, sizeof(struct ns2__simularReestructuracionResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__simularReestructuracionResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_datos && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons2__DatoXml(soap, "datos", &a->datos, "ns2:DatoXml"))
				{	soap_flag_datos--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__simularReestructuracionResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__simularReestructuracionResponse, 0, sizeof(struct ns2__simularReestructuracionResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__simularReestructuracionResponse(struct soap *soap, const struct ns2__simularReestructuracionResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__simularReestructuracionResponse);
	if (soap_out_ns2__simularReestructuracionResponse(soap, tag?tag:"ns2:simularReestructuracionResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__simularReestructuracionResponse * SOAP_FMAC4 soap_get_ns2__simularReestructuracionResponse(struct soap *soap, struct ns2__simularReestructuracionResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__simularReestructuracionResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns2__simularReestructuracionResponse * SOAP_FMAC2 soap_instantiate_ns2__simularReestructuracionResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__simularReestructuracionResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__simularReestructuracionResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns2__simularReestructuracionResponse);
		if (size)
			*size = sizeof(struct ns2__simularReestructuracionResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns2__simularReestructuracionResponse, n);
		if (size)
			*size = n * sizeof(struct ns2__simularReestructuracionResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns2__simularReestructuracionResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__simularReestructuracionResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns2__simularReestructuracionResponse %p -> %p\n", q, p));
	*(struct ns2__simularReestructuracionResponse*)p = *(struct ns2__simularReestructuracionResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__leerMargenCredito01(struct soap *soap, struct ns2__leerMargenCredito01 *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->numerocliente);
	soap_default_string(soap, &a->Fecha);
	soap_default_int(soap, &a->Tienda);
	soap_default_int(soap, &a->ciudad);
	soap_default_string(soap, &a->cIpCartera);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__leerMargenCredito01(struct soap *soap, const struct ns2__leerMargenCredito01 *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->Fecha);
	soap_serialize_string(soap, &a->cIpCartera);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__leerMargenCredito01(struct soap *soap, const char *tag, int id, const struct ns2__leerMargenCredito01 *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__leerMargenCredito01), type))
		return soap->error;
	if (soap_out_int(soap, "numerocliente", -1, &a->numerocliente, ""))
		return soap->error;
	if (soap_out_string(soap, "Fecha", -1, &a->Fecha, ""))
		return soap->error;
	if (soap_out_int(soap, "Tienda", -1, &a->Tienda, ""))
		return soap->error;
	if (soap_out_int(soap, "ciudad", -1, &a->ciudad, ""))
		return soap->error;
	if (soap_out_string(soap, "cIpCartera", -1, &a->cIpCartera, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__leerMargenCredito01 * SOAP_FMAC4 soap_in_ns2__leerMargenCredito01(struct soap *soap, const char *tag, struct ns2__leerMargenCredito01 *a, const char *type)
{
	size_t soap_flag_numerocliente = 1;
	size_t soap_flag_Fecha = 1;
	size_t soap_flag_Tienda = 1;
	size_t soap_flag_ciudad = 1;
	size_t soap_flag_cIpCartera = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__leerMargenCredito01 *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__leerMargenCredito01, sizeof(struct ns2__leerMargenCredito01), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__leerMargenCredito01(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_numerocliente && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "numerocliente", &a->numerocliente, "xsd:int"))
				{	soap_flag_numerocliente--;
					continue;
				}
			if (soap_flag_Fecha && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "Fecha", &a->Fecha, "xsd:string"))
				{	soap_flag_Fecha--;
					continue;
				}
			if (soap_flag_Tienda && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "Tienda", &a->Tienda, "xsd:int"))
				{	soap_flag_Tienda--;
					continue;
				}
			if (soap_flag_ciudad && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ciudad", &a->ciudad, "xsd:int"))
				{	soap_flag_ciudad--;
					continue;
				}
			if (soap_flag_cIpCartera && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "cIpCartera", &a->cIpCartera, "xsd:string"))
				{	soap_flag_cIpCartera--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__leerMargenCredito01 *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__leerMargenCredito01, 0, sizeof(struct ns2__leerMargenCredito01), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_numerocliente > 0 || soap_flag_Tienda > 0 || soap_flag_ciudad > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__leerMargenCredito01(struct soap *soap, const struct ns2__leerMargenCredito01 *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__leerMargenCredito01);
	if (soap_out_ns2__leerMargenCredito01(soap, tag?tag:"ns2:leerMargenCredito01", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__leerMargenCredito01 * SOAP_FMAC4 soap_get_ns2__leerMargenCredito01(struct soap *soap, struct ns2__leerMargenCredito01 *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__leerMargenCredito01(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns2__leerMargenCredito01 * SOAP_FMAC2 soap_instantiate_ns2__leerMargenCredito01(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__leerMargenCredito01(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__leerMargenCredito01, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns2__leerMargenCredito01);
		if (size)
			*size = sizeof(struct ns2__leerMargenCredito01);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns2__leerMargenCredito01, n);
		if (size)
			*size = n * sizeof(struct ns2__leerMargenCredito01);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns2__leerMargenCredito01*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__leerMargenCredito01(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns2__leerMargenCredito01 %p -> %p\n", q, p));
	*(struct ns2__leerMargenCredito01*)p = *(struct ns2__leerMargenCredito01*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__leerMargenCredito01Response(struct soap *soap, struct ns2__leerMargenCredito01Response *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->datos = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__leerMargenCredito01Response(struct soap *soap, const struct ns2__leerMargenCredito01Response *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTons2__DatoXml(soap, &a->datos);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__leerMargenCredito01Response(struct soap *soap, const char *tag, int id, const struct ns2__leerMargenCredito01Response *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__leerMargenCredito01Response), type))
		return soap->error;
	if (soap_out_PointerTons2__DatoXml(soap, "datos", -1, &a->datos, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__leerMargenCredito01Response * SOAP_FMAC4 soap_in_ns2__leerMargenCredito01Response(struct soap *soap, const char *tag, struct ns2__leerMargenCredito01Response *a, const char *type)
{
	size_t soap_flag_datos = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__leerMargenCredito01Response *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__leerMargenCredito01Response, sizeof(struct ns2__leerMargenCredito01Response), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__leerMargenCredito01Response(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_datos && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons2__DatoXml(soap, "datos", &a->datos, "ns2:DatoXml"))
				{	soap_flag_datos--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__leerMargenCredito01Response *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__leerMargenCredito01Response, 0, sizeof(struct ns2__leerMargenCredito01Response), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__leerMargenCredito01Response(struct soap *soap, const struct ns2__leerMargenCredito01Response *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__leerMargenCredito01Response);
	if (soap_out_ns2__leerMargenCredito01Response(soap, tag?tag:"ns2:leerMargenCredito01Response", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__leerMargenCredito01Response * SOAP_FMAC4 soap_get_ns2__leerMargenCredito01Response(struct soap *soap, struct ns2__leerMargenCredito01Response *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__leerMargenCredito01Response(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns2__leerMargenCredito01Response * SOAP_FMAC2 soap_instantiate_ns2__leerMargenCredito01Response(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__leerMargenCredito01Response(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__leerMargenCredito01Response, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns2__leerMargenCredito01Response);
		if (size)
			*size = sizeof(struct ns2__leerMargenCredito01Response);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns2__leerMargenCredito01Response, n);
		if (size)
			*size = n * sizeof(struct ns2__leerMargenCredito01Response);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns2__leerMargenCredito01Response*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__leerMargenCredito01Response(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns2__leerMargenCredito01Response %p -> %p\n", q, p));
	*(struct ns2__leerMargenCredito01Response*)p = *(struct ns2__leerMargenCredito01Response*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__leerCandidatosAumentoLRC(struct soap *soap, struct ns2__leerCandidatosAumentoLRC *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->numerocliente);
	soap_default_string(soap, &a->Fecha);
	soap_default_int(soap, &a->Tienda);
	soap_default_int(soap, &a->ciudad);
	soap_default_string(soap, &a->cIpCartera);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__leerCandidatosAumentoLRC(struct soap *soap, const struct ns2__leerCandidatosAumentoLRC *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->Fecha);
	soap_serialize_string(soap, &a->cIpCartera);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__leerCandidatosAumentoLRC(struct soap *soap, const char *tag, int id, const struct ns2__leerCandidatosAumentoLRC *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__leerCandidatosAumentoLRC), type))
		return soap->error;
	if (soap_out_int(soap, "numerocliente", -1, &a->numerocliente, ""))
		return soap->error;
	if (soap_out_string(soap, "Fecha", -1, &a->Fecha, ""))
		return soap->error;
	if (soap_out_int(soap, "Tienda", -1, &a->Tienda, ""))
		return soap->error;
	if (soap_out_int(soap, "ciudad", -1, &a->ciudad, ""))
		return soap->error;
	if (soap_out_string(soap, "cIpCartera", -1, &a->cIpCartera, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__leerCandidatosAumentoLRC * SOAP_FMAC4 soap_in_ns2__leerCandidatosAumentoLRC(struct soap *soap, const char *tag, struct ns2__leerCandidatosAumentoLRC *a, const char *type)
{
	size_t soap_flag_numerocliente = 1;
	size_t soap_flag_Fecha = 1;
	size_t soap_flag_Tienda = 1;
	size_t soap_flag_ciudad = 1;
	size_t soap_flag_cIpCartera = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__leerCandidatosAumentoLRC *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__leerCandidatosAumentoLRC, sizeof(struct ns2__leerCandidatosAumentoLRC), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__leerCandidatosAumentoLRC(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_numerocliente && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "numerocliente", &a->numerocliente, "xsd:int"))
				{	soap_flag_numerocliente--;
					continue;
				}
			if (soap_flag_Fecha && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "Fecha", &a->Fecha, "xsd:string"))
				{	soap_flag_Fecha--;
					continue;
				}
			if (soap_flag_Tienda && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "Tienda", &a->Tienda, "xsd:int"))
				{	soap_flag_Tienda--;
					continue;
				}
			if (soap_flag_ciudad && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ciudad", &a->ciudad, "xsd:int"))
				{	soap_flag_ciudad--;
					continue;
				}
			if (soap_flag_cIpCartera && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "cIpCartera", &a->cIpCartera, "xsd:string"))
				{	soap_flag_cIpCartera--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__leerCandidatosAumentoLRC *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__leerCandidatosAumentoLRC, 0, sizeof(struct ns2__leerCandidatosAumentoLRC), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_numerocliente > 0 || soap_flag_Tienda > 0 || soap_flag_ciudad > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__leerCandidatosAumentoLRC(struct soap *soap, const struct ns2__leerCandidatosAumentoLRC *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__leerCandidatosAumentoLRC);
	if (soap_out_ns2__leerCandidatosAumentoLRC(soap, tag?tag:"ns2:leerCandidatosAumentoLRC", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__leerCandidatosAumentoLRC * SOAP_FMAC4 soap_get_ns2__leerCandidatosAumentoLRC(struct soap *soap, struct ns2__leerCandidatosAumentoLRC *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__leerCandidatosAumentoLRC(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns2__leerCandidatosAumentoLRC * SOAP_FMAC2 soap_instantiate_ns2__leerCandidatosAumentoLRC(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__leerCandidatosAumentoLRC(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__leerCandidatosAumentoLRC, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns2__leerCandidatosAumentoLRC);
		if (size)
			*size = sizeof(struct ns2__leerCandidatosAumentoLRC);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns2__leerCandidatosAumentoLRC, n);
		if (size)
			*size = n * sizeof(struct ns2__leerCandidatosAumentoLRC);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns2__leerCandidatosAumentoLRC*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__leerCandidatosAumentoLRC(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns2__leerCandidatosAumentoLRC %p -> %p\n", q, p));
	*(struct ns2__leerCandidatosAumentoLRC*)p = *(struct ns2__leerCandidatosAumentoLRC*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__leerCandidatosAumentoLRCResponse(struct soap *soap, struct ns2__leerCandidatosAumentoLRCResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->datos = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__leerCandidatosAumentoLRCResponse(struct soap *soap, const struct ns2__leerCandidatosAumentoLRCResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTons2__DatoXml(soap, &a->datos);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__leerCandidatosAumentoLRCResponse(struct soap *soap, const char *tag, int id, const struct ns2__leerCandidatosAumentoLRCResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__leerCandidatosAumentoLRCResponse), type))
		return soap->error;
	if (soap_out_PointerTons2__DatoXml(soap, "datos", -1, &a->datos, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__leerCandidatosAumentoLRCResponse * SOAP_FMAC4 soap_in_ns2__leerCandidatosAumentoLRCResponse(struct soap *soap, const char *tag, struct ns2__leerCandidatosAumentoLRCResponse *a, const char *type)
{
	size_t soap_flag_datos = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__leerCandidatosAumentoLRCResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__leerCandidatosAumentoLRCResponse, sizeof(struct ns2__leerCandidatosAumentoLRCResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__leerCandidatosAumentoLRCResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_datos && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons2__DatoXml(soap, "datos", &a->datos, "ns2:DatoXml"))
				{	soap_flag_datos--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__leerCandidatosAumentoLRCResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__leerCandidatosAumentoLRCResponse, 0, sizeof(struct ns2__leerCandidatosAumentoLRCResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__leerCandidatosAumentoLRCResponse(struct soap *soap, const struct ns2__leerCandidatosAumentoLRCResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__leerCandidatosAumentoLRCResponse);
	if (soap_out_ns2__leerCandidatosAumentoLRCResponse(soap, tag?tag:"ns2:leerCandidatosAumentoLRCResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__leerCandidatosAumentoLRCResponse * SOAP_FMAC4 soap_get_ns2__leerCandidatosAumentoLRCResponse(struct soap *soap, struct ns2__leerCandidatosAumentoLRCResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__leerCandidatosAumentoLRCResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns2__leerCandidatosAumentoLRCResponse * SOAP_FMAC2 soap_instantiate_ns2__leerCandidatosAumentoLRCResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__leerCandidatosAumentoLRCResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__leerCandidatosAumentoLRCResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns2__leerCandidatosAumentoLRCResponse);
		if (size)
			*size = sizeof(struct ns2__leerCandidatosAumentoLRCResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns2__leerCandidatosAumentoLRCResponse, n);
		if (size)
			*size = n * sizeof(struct ns2__leerCandidatosAumentoLRCResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns2__leerCandidatosAumentoLRCResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__leerCandidatosAumentoLRCResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns2__leerCandidatosAumentoLRCResponse %p -> %p\n", q, p));
	*(struct ns2__leerCandidatosAumentoLRCResponse*)p = *(struct ns2__leerCandidatosAumentoLRCResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__leerConvenios01(struct soap *soap, struct ns2__leerConvenios01 *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->numerocliente);
	soap_default_string(soap, &a->Fecha);
	soap_default_string(soap, &a->cIpCartera);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__leerConvenios01(struct soap *soap, const struct ns2__leerConvenios01 *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->Fecha);
	soap_serialize_string(soap, &a->cIpCartera);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__leerConvenios01(struct soap *soap, const char *tag, int id, const struct ns2__leerConvenios01 *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__leerConvenios01), type))
		return soap->error;
	if (soap_out_int(soap, "numerocliente", -1, &a->numerocliente, ""))
		return soap->error;
	if (soap_out_string(soap, "Fecha", -1, &a->Fecha, ""))
		return soap->error;
	if (soap_out_string(soap, "cIpCartera", -1, &a->cIpCartera, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__leerConvenios01 * SOAP_FMAC4 soap_in_ns2__leerConvenios01(struct soap *soap, const char *tag, struct ns2__leerConvenios01 *a, const char *type)
{
	size_t soap_flag_numerocliente = 1;
	size_t soap_flag_Fecha = 1;
	size_t soap_flag_cIpCartera = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__leerConvenios01 *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__leerConvenios01, sizeof(struct ns2__leerConvenios01), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__leerConvenios01(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_numerocliente && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "numerocliente", &a->numerocliente, "xsd:int"))
				{	soap_flag_numerocliente--;
					continue;
				}
			if (soap_flag_Fecha && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "Fecha", &a->Fecha, "xsd:string"))
				{	soap_flag_Fecha--;
					continue;
				}
			if (soap_flag_cIpCartera && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "cIpCartera", &a->cIpCartera, "xsd:string"))
				{	soap_flag_cIpCartera--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__leerConvenios01 *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__leerConvenios01, 0, sizeof(struct ns2__leerConvenios01), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_numerocliente > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__leerConvenios01(struct soap *soap, const struct ns2__leerConvenios01 *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__leerConvenios01);
	if (soap_out_ns2__leerConvenios01(soap, tag?tag:"ns2:leerConvenios01", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__leerConvenios01 * SOAP_FMAC4 soap_get_ns2__leerConvenios01(struct soap *soap, struct ns2__leerConvenios01 *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__leerConvenios01(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns2__leerConvenios01 * SOAP_FMAC2 soap_instantiate_ns2__leerConvenios01(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__leerConvenios01(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__leerConvenios01, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns2__leerConvenios01);
		if (size)
			*size = sizeof(struct ns2__leerConvenios01);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns2__leerConvenios01, n);
		if (size)
			*size = n * sizeof(struct ns2__leerConvenios01);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns2__leerConvenios01*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__leerConvenios01(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns2__leerConvenios01 %p -> %p\n", q, p));
	*(struct ns2__leerConvenios01*)p = *(struct ns2__leerConvenios01*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__leerConvenios01Response(struct soap *soap, struct ns2__leerConvenios01Response *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->datos = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__leerConvenios01Response(struct soap *soap, const struct ns2__leerConvenios01Response *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTons2__DatoXml(soap, &a->datos);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__leerConvenios01Response(struct soap *soap, const char *tag, int id, const struct ns2__leerConvenios01Response *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__leerConvenios01Response), type))
		return soap->error;
	if (soap_out_PointerTons2__DatoXml(soap, "datos", -1, &a->datos, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__leerConvenios01Response * SOAP_FMAC4 soap_in_ns2__leerConvenios01Response(struct soap *soap, const char *tag, struct ns2__leerConvenios01Response *a, const char *type)
{
	size_t soap_flag_datos = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__leerConvenios01Response *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__leerConvenios01Response, sizeof(struct ns2__leerConvenios01Response), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__leerConvenios01Response(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_datos && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons2__DatoXml(soap, "datos", &a->datos, "ns2:DatoXml"))
				{	soap_flag_datos--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__leerConvenios01Response *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__leerConvenios01Response, 0, sizeof(struct ns2__leerConvenios01Response), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__leerConvenios01Response(struct soap *soap, const struct ns2__leerConvenios01Response *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__leerConvenios01Response);
	if (soap_out_ns2__leerConvenios01Response(soap, tag?tag:"ns2:leerConvenios01Response", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__leerConvenios01Response * SOAP_FMAC4 soap_get_ns2__leerConvenios01Response(struct soap *soap, struct ns2__leerConvenios01Response *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__leerConvenios01Response(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns2__leerConvenios01Response * SOAP_FMAC2 soap_instantiate_ns2__leerConvenios01Response(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__leerConvenios01Response(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__leerConvenios01Response, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns2__leerConvenios01Response);
		if (size)
			*size = sizeof(struct ns2__leerConvenios01Response);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns2__leerConvenios01Response, n);
		if (size)
			*size = n * sizeof(struct ns2__leerConvenios01Response);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns2__leerConvenios01Response*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__leerConvenios01Response(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns2__leerConvenios01Response %p -> %p\n", q, p));
	*(struct ns2__leerConvenios01Response*)p = *(struct ns2__leerConvenios01Response*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__leerImportesTotalesCliente01(struct soap *soap, struct ns2__leerImportesTotalesCliente01 *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->numerocliente);
	soap_default_string(soap, &a->Fecha);
	soap_default_string(soap, &a->cIpCartera);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__leerImportesTotalesCliente01(struct soap *soap, const struct ns2__leerImportesTotalesCliente01 *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->Fecha);
	soap_serialize_string(soap, &a->cIpCartera);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__leerImportesTotalesCliente01(struct soap *soap, const char *tag, int id, const struct ns2__leerImportesTotalesCliente01 *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__leerImportesTotalesCliente01), type))
		return soap->error;
	if (soap_out_int(soap, "numerocliente", -1, &a->numerocliente, ""))
		return soap->error;
	if (soap_out_string(soap, "Fecha", -1, &a->Fecha, ""))
		return soap->error;
	if (soap_out_string(soap, "cIpCartera", -1, &a->cIpCartera, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__leerImportesTotalesCliente01 * SOAP_FMAC4 soap_in_ns2__leerImportesTotalesCliente01(struct soap *soap, const char *tag, struct ns2__leerImportesTotalesCliente01 *a, const char *type)
{
	size_t soap_flag_numerocliente = 1;
	size_t soap_flag_Fecha = 1;
	size_t soap_flag_cIpCartera = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__leerImportesTotalesCliente01 *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__leerImportesTotalesCliente01, sizeof(struct ns2__leerImportesTotalesCliente01), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__leerImportesTotalesCliente01(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_numerocliente && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "numerocliente", &a->numerocliente, "xsd:int"))
				{	soap_flag_numerocliente--;
					continue;
				}
			if (soap_flag_Fecha && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "Fecha", &a->Fecha, "xsd:string"))
				{	soap_flag_Fecha--;
					continue;
				}
			if (soap_flag_cIpCartera && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "cIpCartera", &a->cIpCartera, "xsd:string"))
				{	soap_flag_cIpCartera--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__leerImportesTotalesCliente01 *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__leerImportesTotalesCliente01, 0, sizeof(struct ns2__leerImportesTotalesCliente01), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_numerocliente > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__leerImportesTotalesCliente01(struct soap *soap, const struct ns2__leerImportesTotalesCliente01 *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__leerImportesTotalesCliente01);
	if (soap_out_ns2__leerImportesTotalesCliente01(soap, tag?tag:"ns2:leerImportesTotalesCliente01", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__leerImportesTotalesCliente01 * SOAP_FMAC4 soap_get_ns2__leerImportesTotalesCliente01(struct soap *soap, struct ns2__leerImportesTotalesCliente01 *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__leerImportesTotalesCliente01(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns2__leerImportesTotalesCliente01 * SOAP_FMAC2 soap_instantiate_ns2__leerImportesTotalesCliente01(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__leerImportesTotalesCliente01(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__leerImportesTotalesCliente01, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns2__leerImportesTotalesCliente01);
		if (size)
			*size = sizeof(struct ns2__leerImportesTotalesCliente01);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns2__leerImportesTotalesCliente01, n);
		if (size)
			*size = n * sizeof(struct ns2__leerImportesTotalesCliente01);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns2__leerImportesTotalesCliente01*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__leerImportesTotalesCliente01(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns2__leerImportesTotalesCliente01 %p -> %p\n", q, p));
	*(struct ns2__leerImportesTotalesCliente01*)p = *(struct ns2__leerImportesTotalesCliente01*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__leerImportesTotalesCliente01Response(struct soap *soap, struct ns2__leerImportesTotalesCliente01Response *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->datos = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__leerImportesTotalesCliente01Response(struct soap *soap, const struct ns2__leerImportesTotalesCliente01Response *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTons2__DatoXml(soap, &a->datos);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__leerImportesTotalesCliente01Response(struct soap *soap, const char *tag, int id, const struct ns2__leerImportesTotalesCliente01Response *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__leerImportesTotalesCliente01Response), type))
		return soap->error;
	if (soap_out_PointerTons2__DatoXml(soap, "datos", -1, &a->datos, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__leerImportesTotalesCliente01Response * SOAP_FMAC4 soap_in_ns2__leerImportesTotalesCliente01Response(struct soap *soap, const char *tag, struct ns2__leerImportesTotalesCliente01Response *a, const char *type)
{
	size_t soap_flag_datos = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__leerImportesTotalesCliente01Response *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__leerImportesTotalesCliente01Response, sizeof(struct ns2__leerImportesTotalesCliente01Response), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__leerImportesTotalesCliente01Response(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_datos && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons2__DatoXml(soap, "datos", &a->datos, "ns2:DatoXml"))
				{	soap_flag_datos--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__leerImportesTotalesCliente01Response *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__leerImportesTotalesCliente01Response, 0, sizeof(struct ns2__leerImportesTotalesCliente01Response), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__leerImportesTotalesCliente01Response(struct soap *soap, const struct ns2__leerImportesTotalesCliente01Response *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__leerImportesTotalesCliente01Response);
	if (soap_out_ns2__leerImportesTotalesCliente01Response(soap, tag?tag:"ns2:leerImportesTotalesCliente01Response", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__leerImportesTotalesCliente01Response * SOAP_FMAC4 soap_get_ns2__leerImportesTotalesCliente01Response(struct soap *soap, struct ns2__leerImportesTotalesCliente01Response *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__leerImportesTotalesCliente01Response(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns2__leerImportesTotalesCliente01Response * SOAP_FMAC2 soap_instantiate_ns2__leerImportesTotalesCliente01Response(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__leerImportesTotalesCliente01Response(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__leerImportesTotalesCliente01Response, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns2__leerImportesTotalesCliente01Response);
		if (size)
			*size = sizeof(struct ns2__leerImportesTotalesCliente01Response);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns2__leerImportesTotalesCliente01Response, n);
		if (size)
			*size = n * sizeof(struct ns2__leerImportesTotalesCliente01Response);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns2__leerImportesTotalesCliente01Response*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__leerImportesTotalesCliente01Response(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns2__leerImportesTotalesCliente01Response %p -> %p\n", q, p));
	*(struct ns2__leerImportesTotalesCliente01Response*)p = *(struct ns2__leerImportesTotalesCliente01Response*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__leerCuentasCliente01(struct soap *soap, struct ns2__leerCuentasCliente01 *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->numerocliente);
	soap_default_string(soap, &a->Fecha);
	soap_default_string(soap, &a->cIpCartera);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__leerCuentasCliente01(struct soap *soap, const struct ns2__leerCuentasCliente01 *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->Fecha);
	soap_serialize_string(soap, &a->cIpCartera);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__leerCuentasCliente01(struct soap *soap, const char *tag, int id, const struct ns2__leerCuentasCliente01 *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__leerCuentasCliente01), type))
		return soap->error;
	if (soap_out_int(soap, "numerocliente", -1, &a->numerocliente, ""))
		return soap->error;
	if (soap_out_string(soap, "Fecha", -1, &a->Fecha, ""))
		return soap->error;
	if (soap_out_string(soap, "cIpCartera", -1, &a->cIpCartera, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__leerCuentasCliente01 * SOAP_FMAC4 soap_in_ns2__leerCuentasCliente01(struct soap *soap, const char *tag, struct ns2__leerCuentasCliente01 *a, const char *type)
{
	size_t soap_flag_numerocliente = 1;
	size_t soap_flag_Fecha = 1;
	size_t soap_flag_cIpCartera = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__leerCuentasCliente01 *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__leerCuentasCliente01, sizeof(struct ns2__leerCuentasCliente01), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__leerCuentasCliente01(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_numerocliente && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "numerocliente", &a->numerocliente, "xsd:int"))
				{	soap_flag_numerocliente--;
					continue;
				}
			if (soap_flag_Fecha && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "Fecha", &a->Fecha, "xsd:string"))
				{	soap_flag_Fecha--;
					continue;
				}
			if (soap_flag_cIpCartera && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "cIpCartera", &a->cIpCartera, "xsd:string"))
				{	soap_flag_cIpCartera--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__leerCuentasCliente01 *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__leerCuentasCliente01, 0, sizeof(struct ns2__leerCuentasCliente01), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_numerocliente > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__leerCuentasCliente01(struct soap *soap, const struct ns2__leerCuentasCliente01 *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__leerCuentasCliente01);
	if (soap_out_ns2__leerCuentasCliente01(soap, tag?tag:"ns2:leerCuentasCliente01", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__leerCuentasCliente01 * SOAP_FMAC4 soap_get_ns2__leerCuentasCliente01(struct soap *soap, struct ns2__leerCuentasCliente01 *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__leerCuentasCliente01(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns2__leerCuentasCliente01 * SOAP_FMAC2 soap_instantiate_ns2__leerCuentasCliente01(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__leerCuentasCliente01(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__leerCuentasCliente01, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns2__leerCuentasCliente01);
		if (size)
			*size = sizeof(struct ns2__leerCuentasCliente01);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns2__leerCuentasCliente01, n);
		if (size)
			*size = n * sizeof(struct ns2__leerCuentasCliente01);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns2__leerCuentasCliente01*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__leerCuentasCliente01(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns2__leerCuentasCliente01 %p -> %p\n", q, p));
	*(struct ns2__leerCuentasCliente01*)p = *(struct ns2__leerCuentasCliente01*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__leerCuentasCliente01Response(struct soap *soap, struct ns2__leerCuentasCliente01Response *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->datos = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__leerCuentasCliente01Response(struct soap *soap, const struct ns2__leerCuentasCliente01Response *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTons2__DatoXml(soap, &a->datos);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__leerCuentasCliente01Response(struct soap *soap, const char *tag, int id, const struct ns2__leerCuentasCliente01Response *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__leerCuentasCliente01Response), type))
		return soap->error;
	if (soap_out_PointerTons2__DatoXml(soap, "datos", -1, &a->datos, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__leerCuentasCliente01Response * SOAP_FMAC4 soap_in_ns2__leerCuentasCliente01Response(struct soap *soap, const char *tag, struct ns2__leerCuentasCliente01Response *a, const char *type)
{
	size_t soap_flag_datos = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__leerCuentasCliente01Response *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__leerCuentasCliente01Response, sizeof(struct ns2__leerCuentasCliente01Response), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__leerCuentasCliente01Response(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_datos && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons2__DatoXml(soap, "datos", &a->datos, "ns2:DatoXml"))
				{	soap_flag_datos--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__leerCuentasCliente01Response *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__leerCuentasCliente01Response, 0, sizeof(struct ns2__leerCuentasCliente01Response), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__leerCuentasCliente01Response(struct soap *soap, const struct ns2__leerCuentasCliente01Response *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__leerCuentasCliente01Response);
	if (soap_out_ns2__leerCuentasCliente01Response(soap, tag?tag:"ns2:leerCuentasCliente01Response", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__leerCuentasCliente01Response * SOAP_FMAC4 soap_get_ns2__leerCuentasCliente01Response(struct soap *soap, struct ns2__leerCuentasCliente01Response *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__leerCuentasCliente01Response(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns2__leerCuentasCliente01Response * SOAP_FMAC2 soap_instantiate_ns2__leerCuentasCliente01Response(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__leerCuentasCliente01Response(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__leerCuentasCliente01Response, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns2__leerCuentasCliente01Response);
		if (size)
			*size = sizeof(struct ns2__leerCuentasCliente01Response);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns2__leerCuentasCliente01Response, n);
		if (size)
			*size = n * sizeof(struct ns2__leerCuentasCliente01Response);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns2__leerCuentasCliente01Response*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__leerCuentasCliente01Response(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns2__leerCuentasCliente01Response %p -> %p\n", q, p));
	*(struct ns2__leerCuentasCliente01Response*)p = *(struct ns2__leerCuentasCliente01Response*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__leerCuentaCliente01(struct soap *soap, struct ns2__leerCuentaCliente01 *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->numerocliente);
	soap_default_string(soap, &a->Fecha);
	soap_default_string(soap, &a->tipoconsulta);
	soap_default_string(soap, &a->cIpCartera);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__leerCuentaCliente01(struct soap *soap, const struct ns2__leerCuentaCliente01 *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->Fecha);
	soap_serialize_string(soap, &a->tipoconsulta);
	soap_serialize_string(soap, &a->cIpCartera);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__leerCuentaCliente01(struct soap *soap, const char *tag, int id, const struct ns2__leerCuentaCliente01 *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__leerCuentaCliente01), type))
		return soap->error;
	if (soap_out_int(soap, "numerocliente", -1, &a->numerocliente, ""))
		return soap->error;
	if (soap_out_string(soap, "Fecha", -1, &a->Fecha, ""))
		return soap->error;
	if (soap_out_string(soap, "tipoconsulta", -1, &a->tipoconsulta, ""))
		return soap->error;
	if (soap_out_string(soap, "cIpCartera", -1, &a->cIpCartera, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__leerCuentaCliente01 * SOAP_FMAC4 soap_in_ns2__leerCuentaCliente01(struct soap *soap, const char *tag, struct ns2__leerCuentaCliente01 *a, const char *type)
{
	size_t soap_flag_numerocliente = 1;
	size_t soap_flag_Fecha = 1;
	size_t soap_flag_tipoconsulta = 1;
	size_t soap_flag_cIpCartera = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__leerCuentaCliente01 *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__leerCuentaCliente01, sizeof(struct ns2__leerCuentaCliente01), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__leerCuentaCliente01(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_numerocliente && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "numerocliente", &a->numerocliente, "xsd:int"))
				{	soap_flag_numerocliente--;
					continue;
				}
			if (soap_flag_Fecha && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "Fecha", &a->Fecha, "xsd:string"))
				{	soap_flag_Fecha--;
					continue;
				}
			if (soap_flag_tipoconsulta && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "tipoconsulta", &a->tipoconsulta, "xsd:string"))
				{	soap_flag_tipoconsulta--;
					continue;
				}
			if (soap_flag_cIpCartera && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "cIpCartera", &a->cIpCartera, "xsd:string"))
				{	soap_flag_cIpCartera--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__leerCuentaCliente01 *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__leerCuentaCliente01, 0, sizeof(struct ns2__leerCuentaCliente01), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_numerocliente > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__leerCuentaCliente01(struct soap *soap, const struct ns2__leerCuentaCliente01 *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__leerCuentaCliente01);
	if (soap_out_ns2__leerCuentaCliente01(soap, tag?tag:"ns2:leerCuentaCliente01", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__leerCuentaCliente01 * SOAP_FMAC4 soap_get_ns2__leerCuentaCliente01(struct soap *soap, struct ns2__leerCuentaCliente01 *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__leerCuentaCliente01(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns2__leerCuentaCliente01 * SOAP_FMAC2 soap_instantiate_ns2__leerCuentaCliente01(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__leerCuentaCliente01(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__leerCuentaCliente01, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns2__leerCuentaCliente01);
		if (size)
			*size = sizeof(struct ns2__leerCuentaCliente01);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns2__leerCuentaCliente01, n);
		if (size)
			*size = n * sizeof(struct ns2__leerCuentaCliente01);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns2__leerCuentaCliente01*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__leerCuentaCliente01(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns2__leerCuentaCliente01 %p -> %p\n", q, p));
	*(struct ns2__leerCuentaCliente01*)p = *(struct ns2__leerCuentaCliente01*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__leerCuentaCliente01Response(struct soap *soap, struct ns2__leerCuentaCliente01Response *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->datos = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__leerCuentaCliente01Response(struct soap *soap, const struct ns2__leerCuentaCliente01Response *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTons2__DatoXml(soap, &a->datos);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__leerCuentaCliente01Response(struct soap *soap, const char *tag, int id, const struct ns2__leerCuentaCliente01Response *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__leerCuentaCliente01Response), type))
		return soap->error;
	if (soap_out_PointerTons2__DatoXml(soap, "datos", -1, &a->datos, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__leerCuentaCliente01Response * SOAP_FMAC4 soap_in_ns2__leerCuentaCliente01Response(struct soap *soap, const char *tag, struct ns2__leerCuentaCliente01Response *a, const char *type)
{
	size_t soap_flag_datos = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__leerCuentaCliente01Response *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__leerCuentaCliente01Response, sizeof(struct ns2__leerCuentaCliente01Response), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__leerCuentaCliente01Response(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_datos && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons2__DatoXml(soap, "datos", &a->datos, "ns2:DatoXml"))
				{	soap_flag_datos--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__leerCuentaCliente01Response *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__leerCuentaCliente01Response, 0, sizeof(struct ns2__leerCuentaCliente01Response), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__leerCuentaCliente01Response(struct soap *soap, const struct ns2__leerCuentaCliente01Response *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__leerCuentaCliente01Response);
	if (soap_out_ns2__leerCuentaCliente01Response(soap, tag?tag:"ns2:leerCuentaCliente01Response", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__leerCuentaCliente01Response * SOAP_FMAC4 soap_get_ns2__leerCuentaCliente01Response(struct soap *soap, struct ns2__leerCuentaCliente01Response *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__leerCuentaCliente01Response(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns2__leerCuentaCliente01Response * SOAP_FMAC2 soap_instantiate_ns2__leerCuentaCliente01Response(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__leerCuentaCliente01Response(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__leerCuentaCliente01Response, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns2__leerCuentaCliente01Response);
		if (size)
			*size = sizeof(struct ns2__leerCuentaCliente01Response);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns2__leerCuentaCliente01Response, n);
		if (size)
			*size = n * sizeof(struct ns2__leerCuentaCliente01Response);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns2__leerCuentaCliente01Response*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__leerCuentaCliente01Response(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns2__leerCuentaCliente01Response %p -> %p\n", q, p));
	*(struct ns2__leerCuentaCliente01Response*)p = *(struct ns2__leerCuentaCliente01Response*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__leerCantidadCuentasActivas(struct soap *soap, struct ns2__leerCantidadCuentasActivas *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->numerocliente);
	soap_default_string(soap, &a->Fecha);
	soap_default_string(soap, &a->cIpCartera);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__leerCantidadCuentasActivas(struct soap *soap, const struct ns2__leerCantidadCuentasActivas *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->Fecha);
	soap_serialize_string(soap, &a->cIpCartera);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__leerCantidadCuentasActivas(struct soap *soap, const char *tag, int id, const struct ns2__leerCantidadCuentasActivas *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__leerCantidadCuentasActivas), type))
		return soap->error;
	if (soap_out_int(soap, "numerocliente", -1, &a->numerocliente, ""))
		return soap->error;
	if (soap_out_string(soap, "Fecha", -1, &a->Fecha, ""))
		return soap->error;
	if (soap_out_string(soap, "cIpCartera", -1, &a->cIpCartera, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__leerCantidadCuentasActivas * SOAP_FMAC4 soap_in_ns2__leerCantidadCuentasActivas(struct soap *soap, const char *tag, struct ns2__leerCantidadCuentasActivas *a, const char *type)
{
	size_t soap_flag_numerocliente = 1;
	size_t soap_flag_Fecha = 1;
	size_t soap_flag_cIpCartera = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__leerCantidadCuentasActivas *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__leerCantidadCuentasActivas, sizeof(struct ns2__leerCantidadCuentasActivas), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__leerCantidadCuentasActivas(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_numerocliente && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "numerocliente", &a->numerocliente, "xsd:int"))
				{	soap_flag_numerocliente--;
					continue;
				}
			if (soap_flag_Fecha && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "Fecha", &a->Fecha, "xsd:string"))
				{	soap_flag_Fecha--;
					continue;
				}
			if (soap_flag_cIpCartera && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "cIpCartera", &a->cIpCartera, "xsd:string"))
				{	soap_flag_cIpCartera--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__leerCantidadCuentasActivas *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__leerCantidadCuentasActivas, 0, sizeof(struct ns2__leerCantidadCuentasActivas), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_numerocliente > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__leerCantidadCuentasActivas(struct soap *soap, const struct ns2__leerCantidadCuentasActivas *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__leerCantidadCuentasActivas);
	if (soap_out_ns2__leerCantidadCuentasActivas(soap, tag?tag:"ns2:leerCantidadCuentasActivas", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__leerCantidadCuentasActivas * SOAP_FMAC4 soap_get_ns2__leerCantidadCuentasActivas(struct soap *soap, struct ns2__leerCantidadCuentasActivas *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__leerCantidadCuentasActivas(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns2__leerCantidadCuentasActivas * SOAP_FMAC2 soap_instantiate_ns2__leerCantidadCuentasActivas(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__leerCantidadCuentasActivas(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__leerCantidadCuentasActivas, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns2__leerCantidadCuentasActivas);
		if (size)
			*size = sizeof(struct ns2__leerCantidadCuentasActivas);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns2__leerCantidadCuentasActivas, n);
		if (size)
			*size = n * sizeof(struct ns2__leerCantidadCuentasActivas);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns2__leerCantidadCuentasActivas*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__leerCantidadCuentasActivas(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns2__leerCantidadCuentasActivas %p -> %p\n", q, p));
	*(struct ns2__leerCantidadCuentasActivas*)p = *(struct ns2__leerCantidadCuentasActivas*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__leerCantidadCuentasActivasResponse(struct soap *soap, struct ns2__leerCantidadCuentasActivasResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->datos = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__leerCantidadCuentasActivasResponse(struct soap *soap, const struct ns2__leerCantidadCuentasActivasResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTons2__DatoXml(soap, &a->datos);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__leerCantidadCuentasActivasResponse(struct soap *soap, const char *tag, int id, const struct ns2__leerCantidadCuentasActivasResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__leerCantidadCuentasActivasResponse), type))
		return soap->error;
	if (soap_out_PointerTons2__DatoXml(soap, "datos", -1, &a->datos, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__leerCantidadCuentasActivasResponse * SOAP_FMAC4 soap_in_ns2__leerCantidadCuentasActivasResponse(struct soap *soap, const char *tag, struct ns2__leerCantidadCuentasActivasResponse *a, const char *type)
{
	size_t soap_flag_datos = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__leerCantidadCuentasActivasResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__leerCantidadCuentasActivasResponse, sizeof(struct ns2__leerCantidadCuentasActivasResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__leerCantidadCuentasActivasResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_datos && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons2__DatoXml(soap, "datos", &a->datos, "ns2:DatoXml"))
				{	soap_flag_datos--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__leerCantidadCuentasActivasResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__leerCantidadCuentasActivasResponse, 0, sizeof(struct ns2__leerCantidadCuentasActivasResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__leerCantidadCuentasActivasResponse(struct soap *soap, const struct ns2__leerCantidadCuentasActivasResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__leerCantidadCuentasActivasResponse);
	if (soap_out_ns2__leerCantidadCuentasActivasResponse(soap, tag?tag:"ns2:leerCantidadCuentasActivasResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__leerCantidadCuentasActivasResponse * SOAP_FMAC4 soap_get_ns2__leerCantidadCuentasActivasResponse(struct soap *soap, struct ns2__leerCantidadCuentasActivasResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__leerCantidadCuentasActivasResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns2__leerCantidadCuentasActivasResponse * SOAP_FMAC2 soap_instantiate_ns2__leerCantidadCuentasActivasResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__leerCantidadCuentasActivasResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__leerCantidadCuentasActivasResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns2__leerCantidadCuentasActivasResponse);
		if (size)
			*size = sizeof(struct ns2__leerCantidadCuentasActivasResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns2__leerCantidadCuentasActivasResponse, n);
		if (size)
			*size = n * sizeof(struct ns2__leerCantidadCuentasActivasResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns2__leerCantidadCuentasActivasResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__leerCantidadCuentasActivasResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns2__leerCantidadCuentasActivasResponse %p -> %p\n", q, p));
	*(struct ns2__leerCantidadCuentasActivasResponse*)p = *(struct ns2__leerCantidadCuentasActivasResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__leerConvenios(struct soap *soap, struct ns2__leerConvenios *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->numerocliente);
	soap_default_string(soap, &a->Fecha);
	soap_default_string(soap, &a->cIpCartera);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__leerConvenios(struct soap *soap, const struct ns2__leerConvenios *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->Fecha);
	soap_serialize_string(soap, &a->cIpCartera);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__leerConvenios(struct soap *soap, const char *tag, int id, const struct ns2__leerConvenios *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__leerConvenios), type))
		return soap->error;
	if (soap_out_int(soap, "numerocliente", -1, &a->numerocliente, ""))
		return soap->error;
	if (soap_out_string(soap, "Fecha", -1, &a->Fecha, ""))
		return soap->error;
	if (soap_out_string(soap, "cIpCartera", -1, &a->cIpCartera, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__leerConvenios * SOAP_FMAC4 soap_in_ns2__leerConvenios(struct soap *soap, const char *tag, struct ns2__leerConvenios *a, const char *type)
{
	size_t soap_flag_numerocliente = 1;
	size_t soap_flag_Fecha = 1;
	size_t soap_flag_cIpCartera = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__leerConvenios *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__leerConvenios, sizeof(struct ns2__leerConvenios), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__leerConvenios(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_numerocliente && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "numerocliente", &a->numerocliente, "xsd:int"))
				{	soap_flag_numerocliente--;
					continue;
				}
			if (soap_flag_Fecha && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "Fecha", &a->Fecha, "xsd:string"))
				{	soap_flag_Fecha--;
					continue;
				}
			if (soap_flag_cIpCartera && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "cIpCartera", &a->cIpCartera, "xsd:string"))
				{	soap_flag_cIpCartera--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__leerConvenios *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__leerConvenios, 0, sizeof(struct ns2__leerConvenios), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_numerocliente > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__leerConvenios(struct soap *soap, const struct ns2__leerConvenios *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__leerConvenios);
	if (soap_out_ns2__leerConvenios(soap, tag?tag:"ns2:leerConvenios", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__leerConvenios * SOAP_FMAC4 soap_get_ns2__leerConvenios(struct soap *soap, struct ns2__leerConvenios *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__leerConvenios(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns2__leerConvenios * SOAP_FMAC2 soap_instantiate_ns2__leerConvenios(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__leerConvenios(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__leerConvenios, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns2__leerConvenios);
		if (size)
			*size = sizeof(struct ns2__leerConvenios);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns2__leerConvenios, n);
		if (size)
			*size = n * sizeof(struct ns2__leerConvenios);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns2__leerConvenios*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__leerConvenios(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns2__leerConvenios %p -> %p\n", q, p));
	*(struct ns2__leerConvenios*)p = *(struct ns2__leerConvenios*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__leerConveniosResponse(struct soap *soap, struct ns2__leerConveniosResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->datos = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__leerConveniosResponse(struct soap *soap, const struct ns2__leerConveniosResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTons2__DatoXml(soap, &a->datos);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__leerConveniosResponse(struct soap *soap, const char *tag, int id, const struct ns2__leerConveniosResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__leerConveniosResponse), type))
		return soap->error;
	if (soap_out_PointerTons2__DatoXml(soap, "datos", -1, &a->datos, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__leerConveniosResponse * SOAP_FMAC4 soap_in_ns2__leerConveniosResponse(struct soap *soap, const char *tag, struct ns2__leerConveniosResponse *a, const char *type)
{
	size_t soap_flag_datos = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__leerConveniosResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__leerConveniosResponse, sizeof(struct ns2__leerConveniosResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__leerConveniosResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_datos && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons2__DatoXml(soap, "datos", &a->datos, "ns2:DatoXml"))
				{	soap_flag_datos--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__leerConveniosResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__leerConveniosResponse, 0, sizeof(struct ns2__leerConveniosResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__leerConveniosResponse(struct soap *soap, const struct ns2__leerConveniosResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__leerConveniosResponse);
	if (soap_out_ns2__leerConveniosResponse(soap, tag?tag:"ns2:leerConveniosResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__leerConveniosResponse * SOAP_FMAC4 soap_get_ns2__leerConveniosResponse(struct soap *soap, struct ns2__leerConveniosResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__leerConveniosResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns2__leerConveniosResponse * SOAP_FMAC2 soap_instantiate_ns2__leerConveniosResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__leerConveniosResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__leerConveniosResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns2__leerConveniosResponse);
		if (size)
			*size = sizeof(struct ns2__leerConveniosResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns2__leerConveniosResponse, n);
		if (size)
			*size = n * sizeof(struct ns2__leerConveniosResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns2__leerConveniosResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__leerConveniosResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns2__leerConveniosResponse %p -> %p\n", q, p));
	*(struct ns2__leerConveniosResponse*)p = *(struct ns2__leerConveniosResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__leerMargenCredito(struct soap *soap, struct ns2__leerMargenCredito *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->numerocliente);
	soap_default_string(soap, &a->Fecha);
	soap_default_int(soap, &a->Tienda);
	soap_default_int(soap, &a->ciudad);
	soap_default_string(soap, &a->cIpCartera);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__leerMargenCredito(struct soap *soap, const struct ns2__leerMargenCredito *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->Fecha);
	soap_serialize_string(soap, &a->cIpCartera);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__leerMargenCredito(struct soap *soap, const char *tag, int id, const struct ns2__leerMargenCredito *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__leerMargenCredito), type))
		return soap->error;
	if (soap_out_int(soap, "numerocliente", -1, &a->numerocliente, ""))
		return soap->error;
	if (soap_out_string(soap, "Fecha", -1, &a->Fecha, ""))
		return soap->error;
	if (soap_out_int(soap, "Tienda", -1, &a->Tienda, ""))
		return soap->error;
	if (soap_out_int(soap, "ciudad", -1, &a->ciudad, ""))
		return soap->error;
	if (soap_out_string(soap, "cIpCartera", -1, &a->cIpCartera, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__leerMargenCredito * SOAP_FMAC4 soap_in_ns2__leerMargenCredito(struct soap *soap, const char *tag, struct ns2__leerMargenCredito *a, const char *type)
{
	size_t soap_flag_numerocliente = 1;
	size_t soap_flag_Fecha = 1;
	size_t soap_flag_Tienda = 1;
	size_t soap_flag_ciudad = 1;
	size_t soap_flag_cIpCartera = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__leerMargenCredito *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__leerMargenCredito, sizeof(struct ns2__leerMargenCredito), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__leerMargenCredito(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_numerocliente && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "numerocliente", &a->numerocliente, "xsd:int"))
				{	soap_flag_numerocliente--;
					continue;
				}
			if (soap_flag_Fecha && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "Fecha", &a->Fecha, "xsd:string"))
				{	soap_flag_Fecha--;
					continue;
				}
			if (soap_flag_Tienda && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "Tienda", &a->Tienda, "xsd:int"))
				{	soap_flag_Tienda--;
					continue;
				}
			if (soap_flag_ciudad && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ciudad", &a->ciudad, "xsd:int"))
				{	soap_flag_ciudad--;
					continue;
				}
			if (soap_flag_cIpCartera && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "cIpCartera", &a->cIpCartera, "xsd:string"))
				{	soap_flag_cIpCartera--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__leerMargenCredito *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__leerMargenCredito, 0, sizeof(struct ns2__leerMargenCredito), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_numerocliente > 0 || soap_flag_Tienda > 0 || soap_flag_ciudad > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__leerMargenCredito(struct soap *soap, const struct ns2__leerMargenCredito *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__leerMargenCredito);
	if (soap_out_ns2__leerMargenCredito(soap, tag?tag:"ns2:leerMargenCredito", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__leerMargenCredito * SOAP_FMAC4 soap_get_ns2__leerMargenCredito(struct soap *soap, struct ns2__leerMargenCredito *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__leerMargenCredito(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns2__leerMargenCredito * SOAP_FMAC2 soap_instantiate_ns2__leerMargenCredito(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__leerMargenCredito(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__leerMargenCredito, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns2__leerMargenCredito);
		if (size)
			*size = sizeof(struct ns2__leerMargenCredito);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns2__leerMargenCredito, n);
		if (size)
			*size = n * sizeof(struct ns2__leerMargenCredito);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns2__leerMargenCredito*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__leerMargenCredito(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns2__leerMargenCredito %p -> %p\n", q, p));
	*(struct ns2__leerMargenCredito*)p = *(struct ns2__leerMargenCredito*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__leerMargenCreditoResponse(struct soap *soap, struct ns2__leerMargenCreditoResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->datos = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__leerMargenCreditoResponse(struct soap *soap, const struct ns2__leerMargenCreditoResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTons2__DatoXml(soap, &a->datos);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__leerMargenCreditoResponse(struct soap *soap, const char *tag, int id, const struct ns2__leerMargenCreditoResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__leerMargenCreditoResponse), type))
		return soap->error;
	if (soap_out_PointerTons2__DatoXml(soap, "datos", -1, &a->datos, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__leerMargenCreditoResponse * SOAP_FMAC4 soap_in_ns2__leerMargenCreditoResponse(struct soap *soap, const char *tag, struct ns2__leerMargenCreditoResponse *a, const char *type)
{
	size_t soap_flag_datos = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__leerMargenCreditoResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__leerMargenCreditoResponse, sizeof(struct ns2__leerMargenCreditoResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__leerMargenCreditoResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_datos && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons2__DatoXml(soap, "datos", &a->datos, "ns2:DatoXml"))
				{	soap_flag_datos--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__leerMargenCreditoResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__leerMargenCreditoResponse, 0, sizeof(struct ns2__leerMargenCreditoResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__leerMargenCreditoResponse(struct soap *soap, const struct ns2__leerMargenCreditoResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__leerMargenCreditoResponse);
	if (soap_out_ns2__leerMargenCreditoResponse(soap, tag?tag:"ns2:leerMargenCreditoResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__leerMargenCreditoResponse * SOAP_FMAC4 soap_get_ns2__leerMargenCreditoResponse(struct soap *soap, struct ns2__leerMargenCreditoResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__leerMargenCreditoResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns2__leerMargenCreditoResponse * SOAP_FMAC2 soap_instantiate_ns2__leerMargenCreditoResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__leerMargenCreditoResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__leerMargenCreditoResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns2__leerMargenCreditoResponse);
		if (size)
			*size = sizeof(struct ns2__leerMargenCreditoResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns2__leerMargenCreditoResponse, n);
		if (size)
			*size = n * sizeof(struct ns2__leerMargenCreditoResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns2__leerMargenCreditoResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__leerMargenCreditoResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns2__leerMargenCreditoResponse %p -> %p\n", q, p));
	*(struct ns2__leerMargenCreditoResponse*)p = *(struct ns2__leerMargenCreditoResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__leerImporteCandidatosPrestamos(struct soap *soap, struct ns2__leerImporteCandidatosPrestamos *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->numerocliente);
	soap_default_string(soap, &a->Fecha);
	soap_default_int(soap, &a->Tienda);
	soap_default_int(soap, &a->ciudad);
	soap_default_string(soap, &a->cIpCartera);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__leerImporteCandidatosPrestamos(struct soap *soap, const struct ns2__leerImporteCandidatosPrestamos *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->Fecha);
	soap_serialize_string(soap, &a->cIpCartera);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__leerImporteCandidatosPrestamos(struct soap *soap, const char *tag, int id, const struct ns2__leerImporteCandidatosPrestamos *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__leerImporteCandidatosPrestamos), type))
		return soap->error;
	if (soap_out_int(soap, "numerocliente", -1, &a->numerocliente, ""))
		return soap->error;
	if (soap_out_string(soap, "Fecha", -1, &a->Fecha, ""))
		return soap->error;
	if (soap_out_int(soap, "Tienda", -1, &a->Tienda, ""))
		return soap->error;
	if (soap_out_int(soap, "ciudad", -1, &a->ciudad, ""))
		return soap->error;
	if (soap_out_string(soap, "cIpCartera", -1, &a->cIpCartera, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__leerImporteCandidatosPrestamos * SOAP_FMAC4 soap_in_ns2__leerImporteCandidatosPrestamos(struct soap *soap, const char *tag, struct ns2__leerImporteCandidatosPrestamos *a, const char *type)
{
	size_t soap_flag_numerocliente = 1;
	size_t soap_flag_Fecha = 1;
	size_t soap_flag_Tienda = 1;
	size_t soap_flag_ciudad = 1;
	size_t soap_flag_cIpCartera = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__leerImporteCandidatosPrestamos *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__leerImporteCandidatosPrestamos, sizeof(struct ns2__leerImporteCandidatosPrestamos), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__leerImporteCandidatosPrestamos(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_numerocliente && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "numerocliente", &a->numerocliente, "xsd:int"))
				{	soap_flag_numerocliente--;
					continue;
				}
			if (soap_flag_Fecha && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "Fecha", &a->Fecha, "xsd:string"))
				{	soap_flag_Fecha--;
					continue;
				}
			if (soap_flag_Tienda && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "Tienda", &a->Tienda, "xsd:int"))
				{	soap_flag_Tienda--;
					continue;
				}
			if (soap_flag_ciudad && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ciudad", &a->ciudad, "xsd:int"))
				{	soap_flag_ciudad--;
					continue;
				}
			if (soap_flag_cIpCartera && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "cIpCartera", &a->cIpCartera, "xsd:string"))
				{	soap_flag_cIpCartera--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__leerImporteCandidatosPrestamos *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__leerImporteCandidatosPrestamos, 0, sizeof(struct ns2__leerImporteCandidatosPrestamos), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_numerocliente > 0 || soap_flag_Tienda > 0 || soap_flag_ciudad > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__leerImporteCandidatosPrestamos(struct soap *soap, const struct ns2__leerImporteCandidatosPrestamos *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__leerImporteCandidatosPrestamos);
	if (soap_out_ns2__leerImporteCandidatosPrestamos(soap, tag?tag:"ns2:leerImporteCandidatosPrestamos", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__leerImporteCandidatosPrestamos * SOAP_FMAC4 soap_get_ns2__leerImporteCandidatosPrestamos(struct soap *soap, struct ns2__leerImporteCandidatosPrestamos *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__leerImporteCandidatosPrestamos(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns2__leerImporteCandidatosPrestamos * SOAP_FMAC2 soap_instantiate_ns2__leerImporteCandidatosPrestamos(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__leerImporteCandidatosPrestamos(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__leerImporteCandidatosPrestamos, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns2__leerImporteCandidatosPrestamos);
		if (size)
			*size = sizeof(struct ns2__leerImporteCandidatosPrestamos);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns2__leerImporteCandidatosPrestamos, n);
		if (size)
			*size = n * sizeof(struct ns2__leerImporteCandidatosPrestamos);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns2__leerImporteCandidatosPrestamos*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__leerImporteCandidatosPrestamos(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns2__leerImporteCandidatosPrestamos %p -> %p\n", q, p));
	*(struct ns2__leerImporteCandidatosPrestamos*)p = *(struct ns2__leerImporteCandidatosPrestamos*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__leerImporteCandidatosPrestamosResponse(struct soap *soap, struct ns2__leerImporteCandidatosPrestamosResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->datos = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__leerImporteCandidatosPrestamosResponse(struct soap *soap, const struct ns2__leerImporteCandidatosPrestamosResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTons2__DatoXml(soap, &a->datos);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__leerImporteCandidatosPrestamosResponse(struct soap *soap, const char *tag, int id, const struct ns2__leerImporteCandidatosPrestamosResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__leerImporteCandidatosPrestamosResponse), type))
		return soap->error;
	if (soap_out_PointerTons2__DatoXml(soap, "datos", -1, &a->datos, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__leerImporteCandidatosPrestamosResponse * SOAP_FMAC4 soap_in_ns2__leerImporteCandidatosPrestamosResponse(struct soap *soap, const char *tag, struct ns2__leerImporteCandidatosPrestamosResponse *a, const char *type)
{
	size_t soap_flag_datos = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__leerImporteCandidatosPrestamosResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__leerImporteCandidatosPrestamosResponse, sizeof(struct ns2__leerImporteCandidatosPrestamosResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__leerImporteCandidatosPrestamosResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_datos && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons2__DatoXml(soap, "datos", &a->datos, "ns2:DatoXml"))
				{	soap_flag_datos--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__leerImporteCandidatosPrestamosResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__leerImporteCandidatosPrestamosResponse, 0, sizeof(struct ns2__leerImporteCandidatosPrestamosResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__leerImporteCandidatosPrestamosResponse(struct soap *soap, const struct ns2__leerImporteCandidatosPrestamosResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__leerImporteCandidatosPrestamosResponse);
	if (soap_out_ns2__leerImporteCandidatosPrestamosResponse(soap, tag?tag:"ns2:leerImporteCandidatosPrestamosResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__leerImporteCandidatosPrestamosResponse * SOAP_FMAC4 soap_get_ns2__leerImporteCandidatosPrestamosResponse(struct soap *soap, struct ns2__leerImporteCandidatosPrestamosResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__leerImporteCandidatosPrestamosResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns2__leerImporteCandidatosPrestamosResponse * SOAP_FMAC2 soap_instantiate_ns2__leerImporteCandidatosPrestamosResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__leerImporteCandidatosPrestamosResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__leerImporteCandidatosPrestamosResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns2__leerImporteCandidatosPrestamosResponse);
		if (size)
			*size = sizeof(struct ns2__leerImporteCandidatosPrestamosResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns2__leerImporteCandidatosPrestamosResponse, n);
		if (size)
			*size = n * sizeof(struct ns2__leerImporteCandidatosPrestamosResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns2__leerImporteCandidatosPrestamosResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__leerImporteCandidatosPrestamosResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns2__leerImporteCandidatosPrestamosResponse %p -> %p\n", q, p));
	*(struct ns2__leerImporteCandidatosPrestamosResponse*)p = *(struct ns2__leerImporteCandidatosPrestamosResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__leerImportesTotalesCliente(struct soap *soap, struct ns2__leerImportesTotalesCliente *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->numerocliente);
	soap_default_string(soap, &a->Fecha);
	soap_default_string(soap, &a->cIpCartera);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__leerImportesTotalesCliente(struct soap *soap, const struct ns2__leerImportesTotalesCliente *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->Fecha);
	soap_serialize_string(soap, &a->cIpCartera);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__leerImportesTotalesCliente(struct soap *soap, const char *tag, int id, const struct ns2__leerImportesTotalesCliente *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__leerImportesTotalesCliente), type))
		return soap->error;
	if (soap_out_int(soap, "numerocliente", -1, &a->numerocliente, ""))
		return soap->error;
	if (soap_out_string(soap, "Fecha", -1, &a->Fecha, ""))
		return soap->error;
	if (soap_out_string(soap, "cIpCartera", -1, &a->cIpCartera, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__leerImportesTotalesCliente * SOAP_FMAC4 soap_in_ns2__leerImportesTotalesCliente(struct soap *soap, const char *tag, struct ns2__leerImportesTotalesCliente *a, const char *type)
{
	size_t soap_flag_numerocliente = 1;
	size_t soap_flag_Fecha = 1;
	size_t soap_flag_cIpCartera = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__leerImportesTotalesCliente *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__leerImportesTotalesCliente, sizeof(struct ns2__leerImportesTotalesCliente), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__leerImportesTotalesCliente(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_numerocliente && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "numerocliente", &a->numerocliente, "xsd:int"))
				{	soap_flag_numerocliente--;
					continue;
				}
			if (soap_flag_Fecha && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "Fecha", &a->Fecha, "xsd:string"))
				{	soap_flag_Fecha--;
					continue;
				}
			if (soap_flag_cIpCartera && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "cIpCartera", &a->cIpCartera, "xsd:string"))
				{	soap_flag_cIpCartera--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__leerImportesTotalesCliente *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__leerImportesTotalesCliente, 0, sizeof(struct ns2__leerImportesTotalesCliente), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_numerocliente > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__leerImportesTotalesCliente(struct soap *soap, const struct ns2__leerImportesTotalesCliente *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__leerImportesTotalesCliente);
	if (soap_out_ns2__leerImportesTotalesCliente(soap, tag?tag:"ns2:leerImportesTotalesCliente", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__leerImportesTotalesCliente * SOAP_FMAC4 soap_get_ns2__leerImportesTotalesCliente(struct soap *soap, struct ns2__leerImportesTotalesCliente *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__leerImportesTotalesCliente(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns2__leerImportesTotalesCliente * SOAP_FMAC2 soap_instantiate_ns2__leerImportesTotalesCliente(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__leerImportesTotalesCliente(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__leerImportesTotalesCliente, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns2__leerImportesTotalesCliente);
		if (size)
			*size = sizeof(struct ns2__leerImportesTotalesCliente);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns2__leerImportesTotalesCliente, n);
		if (size)
			*size = n * sizeof(struct ns2__leerImportesTotalesCliente);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns2__leerImportesTotalesCliente*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__leerImportesTotalesCliente(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns2__leerImportesTotalesCliente %p -> %p\n", q, p));
	*(struct ns2__leerImportesTotalesCliente*)p = *(struct ns2__leerImportesTotalesCliente*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__leerImportesTotalesClienteResponse(struct soap *soap, struct ns2__leerImportesTotalesClienteResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->datos = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__leerImportesTotalesClienteResponse(struct soap *soap, const struct ns2__leerImportesTotalesClienteResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTons2__DatoXml(soap, &a->datos);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__leerImportesTotalesClienteResponse(struct soap *soap, const char *tag, int id, const struct ns2__leerImportesTotalesClienteResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__leerImportesTotalesClienteResponse), type))
		return soap->error;
	if (soap_out_PointerTons2__DatoXml(soap, "datos", -1, &a->datos, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__leerImportesTotalesClienteResponse * SOAP_FMAC4 soap_in_ns2__leerImportesTotalesClienteResponse(struct soap *soap, const char *tag, struct ns2__leerImportesTotalesClienteResponse *a, const char *type)
{
	size_t soap_flag_datos = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__leerImportesTotalesClienteResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__leerImportesTotalesClienteResponse, sizeof(struct ns2__leerImportesTotalesClienteResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__leerImportesTotalesClienteResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_datos && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons2__DatoXml(soap, "datos", &a->datos, "ns2:DatoXml"))
				{	soap_flag_datos--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__leerImportesTotalesClienteResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__leerImportesTotalesClienteResponse, 0, sizeof(struct ns2__leerImportesTotalesClienteResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__leerImportesTotalesClienteResponse(struct soap *soap, const struct ns2__leerImportesTotalesClienteResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__leerImportesTotalesClienteResponse);
	if (soap_out_ns2__leerImportesTotalesClienteResponse(soap, tag?tag:"ns2:leerImportesTotalesClienteResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__leerImportesTotalesClienteResponse * SOAP_FMAC4 soap_get_ns2__leerImportesTotalesClienteResponse(struct soap *soap, struct ns2__leerImportesTotalesClienteResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__leerImportesTotalesClienteResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns2__leerImportesTotalesClienteResponse * SOAP_FMAC2 soap_instantiate_ns2__leerImportesTotalesClienteResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__leerImportesTotalesClienteResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__leerImportesTotalesClienteResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns2__leerImportesTotalesClienteResponse);
		if (size)
			*size = sizeof(struct ns2__leerImportesTotalesClienteResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns2__leerImportesTotalesClienteResponse, n);
		if (size)
			*size = n * sizeof(struct ns2__leerImportesTotalesClienteResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns2__leerImportesTotalesClienteResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__leerImportesTotalesClienteResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns2__leerImportesTotalesClienteResponse %p -> %p\n", q, p));
	*(struct ns2__leerImportesTotalesClienteResponse*)p = *(struct ns2__leerImportesTotalesClienteResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__leerCuentaCliente(struct soap *soap, struct ns2__leerCuentaCliente *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->numerocliente);
	soap_default_string(soap, &a->Fecha);
	soap_default_string(soap, &a->tipoconsulta);
	soap_default_string(soap, &a->cIpCartera);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__leerCuentaCliente(struct soap *soap, const struct ns2__leerCuentaCliente *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->Fecha);
	soap_serialize_string(soap, &a->tipoconsulta);
	soap_serialize_string(soap, &a->cIpCartera);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__leerCuentaCliente(struct soap *soap, const char *tag, int id, const struct ns2__leerCuentaCliente *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__leerCuentaCliente), type))
		return soap->error;
	if (soap_out_int(soap, "numerocliente", -1, &a->numerocliente, ""))
		return soap->error;
	if (soap_out_string(soap, "Fecha", -1, &a->Fecha, ""))
		return soap->error;
	if (soap_out_string(soap, "tipoconsulta", -1, &a->tipoconsulta, ""))
		return soap->error;
	if (soap_out_string(soap, "cIpCartera", -1, &a->cIpCartera, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__leerCuentaCliente * SOAP_FMAC4 soap_in_ns2__leerCuentaCliente(struct soap *soap, const char *tag, struct ns2__leerCuentaCliente *a, const char *type)
{
	size_t soap_flag_numerocliente = 1;
	size_t soap_flag_Fecha = 1;
	size_t soap_flag_tipoconsulta = 1;
	size_t soap_flag_cIpCartera = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__leerCuentaCliente *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__leerCuentaCliente, sizeof(struct ns2__leerCuentaCliente), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__leerCuentaCliente(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_numerocliente && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "numerocliente", &a->numerocliente, "xsd:int"))
				{	soap_flag_numerocliente--;
					continue;
				}
			if (soap_flag_Fecha && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "Fecha", &a->Fecha, "xsd:string"))
				{	soap_flag_Fecha--;
					continue;
				}
			if (soap_flag_tipoconsulta && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "tipoconsulta", &a->tipoconsulta, "xsd:string"))
				{	soap_flag_tipoconsulta--;
					continue;
				}
			if (soap_flag_cIpCartera && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "cIpCartera", &a->cIpCartera, "xsd:string"))
				{	soap_flag_cIpCartera--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__leerCuentaCliente *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__leerCuentaCliente, 0, sizeof(struct ns2__leerCuentaCliente), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_numerocliente > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__leerCuentaCliente(struct soap *soap, const struct ns2__leerCuentaCliente *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__leerCuentaCliente);
	if (soap_out_ns2__leerCuentaCliente(soap, tag?tag:"ns2:leerCuentaCliente", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__leerCuentaCliente * SOAP_FMAC4 soap_get_ns2__leerCuentaCliente(struct soap *soap, struct ns2__leerCuentaCliente *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__leerCuentaCliente(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns2__leerCuentaCliente * SOAP_FMAC2 soap_instantiate_ns2__leerCuentaCliente(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__leerCuentaCliente(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__leerCuentaCliente, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns2__leerCuentaCliente);
		if (size)
			*size = sizeof(struct ns2__leerCuentaCliente);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns2__leerCuentaCliente, n);
		if (size)
			*size = n * sizeof(struct ns2__leerCuentaCliente);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns2__leerCuentaCliente*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__leerCuentaCliente(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns2__leerCuentaCliente %p -> %p\n", q, p));
	*(struct ns2__leerCuentaCliente*)p = *(struct ns2__leerCuentaCliente*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__leerCuentaClienteResponse(struct soap *soap, struct ns2__leerCuentaClienteResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->datos = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__leerCuentaClienteResponse(struct soap *soap, const struct ns2__leerCuentaClienteResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTons2__DatoXml(soap, &a->datos);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__leerCuentaClienteResponse(struct soap *soap, const char *tag, int id, const struct ns2__leerCuentaClienteResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__leerCuentaClienteResponse), type))
		return soap->error;
	if (soap_out_PointerTons2__DatoXml(soap, "datos", -1, &a->datos, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__leerCuentaClienteResponse * SOAP_FMAC4 soap_in_ns2__leerCuentaClienteResponse(struct soap *soap, const char *tag, struct ns2__leerCuentaClienteResponse *a, const char *type)
{
	size_t soap_flag_datos = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__leerCuentaClienteResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__leerCuentaClienteResponse, sizeof(struct ns2__leerCuentaClienteResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__leerCuentaClienteResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_datos && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons2__DatoXml(soap, "datos", &a->datos, "ns2:DatoXml"))
				{	soap_flag_datos--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__leerCuentaClienteResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__leerCuentaClienteResponse, 0, sizeof(struct ns2__leerCuentaClienteResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__leerCuentaClienteResponse(struct soap *soap, const struct ns2__leerCuentaClienteResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__leerCuentaClienteResponse);
	if (soap_out_ns2__leerCuentaClienteResponse(soap, tag?tag:"ns2:leerCuentaClienteResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__leerCuentaClienteResponse * SOAP_FMAC4 soap_get_ns2__leerCuentaClienteResponse(struct soap *soap, struct ns2__leerCuentaClienteResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__leerCuentaClienteResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns2__leerCuentaClienteResponse * SOAP_FMAC2 soap_instantiate_ns2__leerCuentaClienteResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__leerCuentaClienteResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__leerCuentaClienteResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns2__leerCuentaClienteResponse);
		if (size)
			*size = sizeof(struct ns2__leerCuentaClienteResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns2__leerCuentaClienteResponse, n);
		if (size)
			*size = n * sizeof(struct ns2__leerCuentaClienteResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns2__leerCuentaClienteResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__leerCuentaClienteResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns2__leerCuentaClienteResponse %p -> %p\n", q, p));
	*(struct ns2__leerCuentaClienteResponse*)p = *(struct ns2__leerCuentaClienteResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__leerCuentasCliente(struct soap *soap, struct ns2__leerCuentasCliente *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->numerocliente);
	soap_default_string(soap, &a->Fecha);
	soap_default_string(soap, &a->cIpCartera);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__leerCuentasCliente(struct soap *soap, const struct ns2__leerCuentasCliente *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->Fecha);
	soap_serialize_string(soap, &a->cIpCartera);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__leerCuentasCliente(struct soap *soap, const char *tag, int id, const struct ns2__leerCuentasCliente *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__leerCuentasCliente), type))
		return soap->error;
	if (soap_out_int(soap, "numerocliente", -1, &a->numerocliente, ""))
		return soap->error;
	if (soap_out_string(soap, "Fecha", -1, &a->Fecha, ""))
		return soap->error;
	if (soap_out_string(soap, "cIpCartera", -1, &a->cIpCartera, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__leerCuentasCliente * SOAP_FMAC4 soap_in_ns2__leerCuentasCliente(struct soap *soap, const char *tag, struct ns2__leerCuentasCliente *a, const char *type)
{
	size_t soap_flag_numerocliente = 1;
	size_t soap_flag_Fecha = 1;
	size_t soap_flag_cIpCartera = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__leerCuentasCliente *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__leerCuentasCliente, sizeof(struct ns2__leerCuentasCliente), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__leerCuentasCliente(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_numerocliente && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "numerocliente", &a->numerocliente, "xsd:int"))
				{	soap_flag_numerocliente--;
					continue;
				}
			if (soap_flag_Fecha && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "Fecha", &a->Fecha, "xsd:string"))
				{	soap_flag_Fecha--;
					continue;
				}
			if (soap_flag_cIpCartera && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "cIpCartera", &a->cIpCartera, "xsd:string"))
				{	soap_flag_cIpCartera--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__leerCuentasCliente *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__leerCuentasCliente, 0, sizeof(struct ns2__leerCuentasCliente), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_numerocliente > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__leerCuentasCliente(struct soap *soap, const struct ns2__leerCuentasCliente *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__leerCuentasCliente);
	if (soap_out_ns2__leerCuentasCliente(soap, tag?tag:"ns2:leerCuentasCliente", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__leerCuentasCliente * SOAP_FMAC4 soap_get_ns2__leerCuentasCliente(struct soap *soap, struct ns2__leerCuentasCliente *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__leerCuentasCliente(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns2__leerCuentasCliente * SOAP_FMAC2 soap_instantiate_ns2__leerCuentasCliente(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__leerCuentasCliente(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__leerCuentasCliente, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns2__leerCuentasCliente);
		if (size)
			*size = sizeof(struct ns2__leerCuentasCliente);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns2__leerCuentasCliente, n);
		if (size)
			*size = n * sizeof(struct ns2__leerCuentasCliente);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns2__leerCuentasCliente*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__leerCuentasCliente(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns2__leerCuentasCliente %p -> %p\n", q, p));
	*(struct ns2__leerCuentasCliente*)p = *(struct ns2__leerCuentasCliente*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__leerCuentasClienteResponse(struct soap *soap, struct ns2__leerCuentasClienteResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->datos = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__leerCuentasClienteResponse(struct soap *soap, const struct ns2__leerCuentasClienteResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTons2__DatoXml(soap, &a->datos);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__leerCuentasClienteResponse(struct soap *soap, const char *tag, int id, const struct ns2__leerCuentasClienteResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__leerCuentasClienteResponse), type))
		return soap->error;
	if (soap_out_PointerTons2__DatoXml(soap, "datos", -1, &a->datos, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__leerCuentasClienteResponse * SOAP_FMAC4 soap_in_ns2__leerCuentasClienteResponse(struct soap *soap, const char *tag, struct ns2__leerCuentasClienteResponse *a, const char *type)
{
	size_t soap_flag_datos = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__leerCuentasClienteResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__leerCuentasClienteResponse, sizeof(struct ns2__leerCuentasClienteResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__leerCuentasClienteResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_datos && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons2__DatoXml(soap, "datos", &a->datos, "ns2:DatoXml"))
				{	soap_flag_datos--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__leerCuentasClienteResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__leerCuentasClienteResponse, 0, sizeof(struct ns2__leerCuentasClienteResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__leerCuentasClienteResponse(struct soap *soap, const struct ns2__leerCuentasClienteResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__leerCuentasClienteResponse);
	if (soap_out_ns2__leerCuentasClienteResponse(soap, tag?tag:"ns2:leerCuentasClienteResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__leerCuentasClienteResponse * SOAP_FMAC4 soap_get_ns2__leerCuentasClienteResponse(struct soap *soap, struct ns2__leerCuentasClienteResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__leerCuentasClienteResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns2__leerCuentasClienteResponse * SOAP_FMAC2 soap_instantiate_ns2__leerCuentasClienteResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__leerCuentasClienteResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__leerCuentasClienteResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns2__leerCuentasClienteResponse);
		if (size)
			*size = sizeof(struct ns2__leerCuentasClienteResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns2__leerCuentasClienteResponse, n);
		if (size)
			*size = n * sizeof(struct ns2__leerCuentasClienteResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns2__leerCuentasClienteResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__leerCuentasClienteResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns2__leerCuentasClienteResponse %p -> %p\n", q, p));
	*(struct ns2__leerCuentasClienteResponse*)p = *(struct ns2__leerCuentasClienteResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__leerDomicilioCliente(struct soap *soap, struct ns2__leerDomicilioCliente *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->numerocliente);
	soap_default_string(soap, &a->cIpCartera);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__leerDomicilioCliente(struct soap *soap, const struct ns2__leerDomicilioCliente *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->cIpCartera);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__leerDomicilioCliente(struct soap *soap, const char *tag, int id, const struct ns2__leerDomicilioCliente *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__leerDomicilioCliente), type))
		return soap->error;
	if (soap_out_int(soap, "numerocliente", -1, &a->numerocliente, ""))
		return soap->error;
	if (soap_out_string(soap, "cIpCartera", -1, &a->cIpCartera, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__leerDomicilioCliente * SOAP_FMAC4 soap_in_ns2__leerDomicilioCliente(struct soap *soap, const char *tag, struct ns2__leerDomicilioCliente *a, const char *type)
{
	size_t soap_flag_numerocliente = 1;
	size_t soap_flag_cIpCartera = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__leerDomicilioCliente *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__leerDomicilioCliente, sizeof(struct ns2__leerDomicilioCliente), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__leerDomicilioCliente(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_numerocliente && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "numerocliente", &a->numerocliente, "xsd:int"))
				{	soap_flag_numerocliente--;
					continue;
				}
			if (soap_flag_cIpCartera && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "cIpCartera", &a->cIpCartera, "xsd:string"))
				{	soap_flag_cIpCartera--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__leerDomicilioCliente *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__leerDomicilioCliente, 0, sizeof(struct ns2__leerDomicilioCliente), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_numerocliente > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__leerDomicilioCliente(struct soap *soap, const struct ns2__leerDomicilioCliente *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__leerDomicilioCliente);
	if (soap_out_ns2__leerDomicilioCliente(soap, tag?tag:"ns2:leerDomicilioCliente", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__leerDomicilioCliente * SOAP_FMAC4 soap_get_ns2__leerDomicilioCliente(struct soap *soap, struct ns2__leerDomicilioCliente *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__leerDomicilioCliente(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns2__leerDomicilioCliente * SOAP_FMAC2 soap_instantiate_ns2__leerDomicilioCliente(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__leerDomicilioCliente(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__leerDomicilioCliente, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns2__leerDomicilioCliente);
		if (size)
			*size = sizeof(struct ns2__leerDomicilioCliente);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns2__leerDomicilioCliente, n);
		if (size)
			*size = n * sizeof(struct ns2__leerDomicilioCliente);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns2__leerDomicilioCliente*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__leerDomicilioCliente(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns2__leerDomicilioCliente %p -> %p\n", q, p));
	*(struct ns2__leerDomicilioCliente*)p = *(struct ns2__leerDomicilioCliente*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__leerDomicilioClienteResponse(struct soap *soap, struct ns2__leerDomicilioClienteResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->datos = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__leerDomicilioClienteResponse(struct soap *soap, const struct ns2__leerDomicilioClienteResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTons2__DatoXml(soap, &a->datos);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__leerDomicilioClienteResponse(struct soap *soap, const char *tag, int id, const struct ns2__leerDomicilioClienteResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__leerDomicilioClienteResponse), type))
		return soap->error;
	if (soap_out_PointerTons2__DatoXml(soap, "datos", -1, &a->datos, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__leerDomicilioClienteResponse * SOAP_FMAC4 soap_in_ns2__leerDomicilioClienteResponse(struct soap *soap, const char *tag, struct ns2__leerDomicilioClienteResponse *a, const char *type)
{
	size_t soap_flag_datos = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__leerDomicilioClienteResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__leerDomicilioClienteResponse, sizeof(struct ns2__leerDomicilioClienteResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__leerDomicilioClienteResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_datos && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons2__DatoXml(soap, "datos", &a->datos, "ns2:DatoXml"))
				{	soap_flag_datos--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__leerDomicilioClienteResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__leerDomicilioClienteResponse, 0, sizeof(struct ns2__leerDomicilioClienteResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__leerDomicilioClienteResponse(struct soap *soap, const struct ns2__leerDomicilioClienteResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__leerDomicilioClienteResponse);
	if (soap_out_ns2__leerDomicilioClienteResponse(soap, tag?tag:"ns2:leerDomicilioClienteResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__leerDomicilioClienteResponse * SOAP_FMAC4 soap_get_ns2__leerDomicilioClienteResponse(struct soap *soap, struct ns2__leerDomicilioClienteResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__leerDomicilioClienteResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns2__leerDomicilioClienteResponse * SOAP_FMAC2 soap_instantiate_ns2__leerDomicilioClienteResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__leerDomicilioClienteResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__leerDomicilioClienteResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns2__leerDomicilioClienteResponse);
		if (size)
			*size = sizeof(struct ns2__leerDomicilioClienteResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns2__leerDomicilioClienteResponse, n);
		if (size)
			*size = n * sizeof(struct ns2__leerDomicilioClienteResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns2__leerDomicilioClienteResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__leerDomicilioClienteResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns2__leerDomicilioClienteResponse %p -> %p\n", q, p));
	*(struct ns2__leerDomicilioClienteResponse*)p = *(struct ns2__leerDomicilioClienteResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__leerDatosCliente(struct soap *soap, struct ns2__leerDatosCliente *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->numerocliente);
	soap_default_string(soap, &a->tipoconsulta);
	soap_default_string(soap, &a->cIpCartera);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__leerDatosCliente(struct soap *soap, const struct ns2__leerDatosCliente *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->tipoconsulta);
	soap_serialize_string(soap, &a->cIpCartera);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__leerDatosCliente(struct soap *soap, const char *tag, int id, const struct ns2__leerDatosCliente *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__leerDatosCliente), type))
		return soap->error;
	if (soap_out_int(soap, "numerocliente", -1, &a->numerocliente, ""))
		return soap->error;
	if (soap_out_string(soap, "tipoconsulta", -1, &a->tipoconsulta, ""))
		return soap->error;
	if (soap_out_string(soap, "cIpCartera", -1, &a->cIpCartera, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__leerDatosCliente * SOAP_FMAC4 soap_in_ns2__leerDatosCliente(struct soap *soap, const char *tag, struct ns2__leerDatosCliente *a, const char *type)
{
	size_t soap_flag_numerocliente = 1;
	size_t soap_flag_tipoconsulta = 1;
	size_t soap_flag_cIpCartera = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__leerDatosCliente *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__leerDatosCliente, sizeof(struct ns2__leerDatosCliente), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__leerDatosCliente(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_numerocliente && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "numerocliente", &a->numerocliente, "xsd:int"))
				{	soap_flag_numerocliente--;
					continue;
				}
			if (soap_flag_tipoconsulta && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "tipoconsulta", &a->tipoconsulta, "xsd:string"))
				{	soap_flag_tipoconsulta--;
					continue;
				}
			if (soap_flag_cIpCartera && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "cIpCartera", &a->cIpCartera, "xsd:string"))
				{	soap_flag_cIpCartera--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__leerDatosCliente *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__leerDatosCliente, 0, sizeof(struct ns2__leerDatosCliente), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_numerocliente > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__leerDatosCliente(struct soap *soap, const struct ns2__leerDatosCliente *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__leerDatosCliente);
	if (soap_out_ns2__leerDatosCliente(soap, tag?tag:"ns2:leerDatosCliente", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__leerDatosCliente * SOAP_FMAC4 soap_get_ns2__leerDatosCliente(struct soap *soap, struct ns2__leerDatosCliente *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__leerDatosCliente(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns2__leerDatosCliente * SOAP_FMAC2 soap_instantiate_ns2__leerDatosCliente(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__leerDatosCliente(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__leerDatosCliente, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns2__leerDatosCliente);
		if (size)
			*size = sizeof(struct ns2__leerDatosCliente);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns2__leerDatosCliente, n);
		if (size)
			*size = n * sizeof(struct ns2__leerDatosCliente);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns2__leerDatosCliente*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__leerDatosCliente(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns2__leerDatosCliente %p -> %p\n", q, p));
	*(struct ns2__leerDatosCliente*)p = *(struct ns2__leerDatosCliente*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__leerDatosClienteResponse(struct soap *soap, struct ns2__leerDatosClienteResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->datos = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__leerDatosClienteResponse(struct soap *soap, const struct ns2__leerDatosClienteResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTons2__DatoXml(soap, &a->datos);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__leerDatosClienteResponse(struct soap *soap, const char *tag, int id, const struct ns2__leerDatosClienteResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__leerDatosClienteResponse), type))
		return soap->error;
	if (soap_out_PointerTons2__DatoXml(soap, "datos", -1, &a->datos, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__leerDatosClienteResponse * SOAP_FMAC4 soap_in_ns2__leerDatosClienteResponse(struct soap *soap, const char *tag, struct ns2__leerDatosClienteResponse *a, const char *type)
{
	size_t soap_flag_datos = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__leerDatosClienteResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__leerDatosClienteResponse, sizeof(struct ns2__leerDatosClienteResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__leerDatosClienteResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_datos && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons2__DatoXml(soap, "datos", &a->datos, "ns2:DatoXml"))
				{	soap_flag_datos--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__leerDatosClienteResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__leerDatosClienteResponse, 0, sizeof(struct ns2__leerDatosClienteResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__leerDatosClienteResponse(struct soap *soap, const struct ns2__leerDatosClienteResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__leerDatosClienteResponse);
	if (soap_out_ns2__leerDatosClienteResponse(soap, tag?tag:"ns2:leerDatosClienteResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__leerDatosClienteResponse * SOAP_FMAC4 soap_get_ns2__leerDatosClienteResponse(struct soap *soap, struct ns2__leerDatosClienteResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__leerDatosClienteResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns2__leerDatosClienteResponse * SOAP_FMAC2 soap_instantiate_ns2__leerDatosClienteResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__leerDatosClienteResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__leerDatosClienteResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns2__leerDatosClienteResponse);
		if (size)
			*size = sizeof(struct ns2__leerDatosClienteResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns2__leerDatosClienteResponse, n);
		if (size)
			*size = n * sizeof(struct ns2__leerDatosClienteResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns2__leerDatosClienteResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__leerDatosClienteResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns2__leerDatosClienteResponse %p -> %p\n", q, p));
	*(struct ns2__leerDatosClienteResponse*)p = *(struct ns2__leerDatosClienteResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__leerClienteCoppel(struct soap *soap, struct ns2__leerClienteCoppel *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->numerocliente);
	soap_default_string(soap, &a->cIpCartera);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__leerClienteCoppel(struct soap *soap, const struct ns2__leerClienteCoppel *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->cIpCartera);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__leerClienteCoppel(struct soap *soap, const char *tag, int id, const struct ns2__leerClienteCoppel *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__leerClienteCoppel), type))
		return soap->error;
	if (soap_out_int(soap, "numerocliente", -1, &a->numerocliente, ""))
		return soap->error;
	if (soap_out_string(soap, "cIpCartera", -1, &a->cIpCartera, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__leerClienteCoppel * SOAP_FMAC4 soap_in_ns2__leerClienteCoppel(struct soap *soap, const char *tag, struct ns2__leerClienteCoppel *a, const char *type)
{
	size_t soap_flag_numerocliente = 1;
	size_t soap_flag_cIpCartera = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__leerClienteCoppel *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__leerClienteCoppel, sizeof(struct ns2__leerClienteCoppel), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__leerClienteCoppel(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_numerocliente && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "numerocliente", &a->numerocliente, "xsd:int"))
				{	soap_flag_numerocliente--;
					continue;
				}
			if (soap_flag_cIpCartera && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "cIpCartera", &a->cIpCartera, "xsd:string"))
				{	soap_flag_cIpCartera--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__leerClienteCoppel *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__leerClienteCoppel, 0, sizeof(struct ns2__leerClienteCoppel), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_numerocliente > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__leerClienteCoppel(struct soap *soap, const struct ns2__leerClienteCoppel *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__leerClienteCoppel);
	if (soap_out_ns2__leerClienteCoppel(soap, tag?tag:"ns2:leerClienteCoppel", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__leerClienteCoppel * SOAP_FMAC4 soap_get_ns2__leerClienteCoppel(struct soap *soap, struct ns2__leerClienteCoppel *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__leerClienteCoppel(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns2__leerClienteCoppel * SOAP_FMAC2 soap_instantiate_ns2__leerClienteCoppel(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__leerClienteCoppel(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__leerClienteCoppel, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns2__leerClienteCoppel);
		if (size)
			*size = sizeof(struct ns2__leerClienteCoppel);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns2__leerClienteCoppel, n);
		if (size)
			*size = n * sizeof(struct ns2__leerClienteCoppel);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns2__leerClienteCoppel*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__leerClienteCoppel(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns2__leerClienteCoppel %p -> %p\n", q, p));
	*(struct ns2__leerClienteCoppel*)p = *(struct ns2__leerClienteCoppel*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__leerClienteCoppelResponse(struct soap *soap, struct ns2__leerClienteCoppelResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->datos = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__leerClienteCoppelResponse(struct soap *soap, const struct ns2__leerClienteCoppelResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTons2__DatoXml(soap, &a->datos);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__leerClienteCoppelResponse(struct soap *soap, const char *tag, int id, const struct ns2__leerClienteCoppelResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__leerClienteCoppelResponse), type))
		return soap->error;
	if (soap_out_PointerTons2__DatoXml(soap, "datos", -1, &a->datos, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__leerClienteCoppelResponse * SOAP_FMAC4 soap_in_ns2__leerClienteCoppelResponse(struct soap *soap, const char *tag, struct ns2__leerClienteCoppelResponse *a, const char *type)
{
	size_t soap_flag_datos = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__leerClienteCoppelResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__leerClienteCoppelResponse, sizeof(struct ns2__leerClienteCoppelResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__leerClienteCoppelResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_datos && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons2__DatoXml(soap, "datos", &a->datos, "ns2:DatoXml"))
				{	soap_flag_datos--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__leerClienteCoppelResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__leerClienteCoppelResponse, 0, sizeof(struct ns2__leerClienteCoppelResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__leerClienteCoppelResponse(struct soap *soap, const struct ns2__leerClienteCoppelResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__leerClienteCoppelResponse);
	if (soap_out_ns2__leerClienteCoppelResponse(soap, tag?tag:"ns2:leerClienteCoppelResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__leerClienteCoppelResponse * SOAP_FMAC4 soap_get_ns2__leerClienteCoppelResponse(struct soap *soap, struct ns2__leerClienteCoppelResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__leerClienteCoppelResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns2__leerClienteCoppelResponse * SOAP_FMAC2 soap_instantiate_ns2__leerClienteCoppelResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__leerClienteCoppelResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__leerClienteCoppelResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns2__leerClienteCoppelResponse);
		if (size)
			*size = sizeof(struct ns2__leerClienteCoppelResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns2__leerClienteCoppelResponse, n);
		if (size)
			*size = n * sizeof(struct ns2__leerClienteCoppelResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns2__leerClienteCoppelResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__leerClienteCoppelResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns2__leerClienteCoppelResponse %p -> %p\n", q, p));
	*(struct ns2__leerClienteCoppelResponse*)p = *(struct ns2__leerClienteCoppelResponse*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Reason);
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Detail);
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Code);
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__DatoXml(struct soap *soap, ns2__DatoXml *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns2__DatoXml))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__DatoXml(struct soap *soap, const char *tag, int id, ns2__DatoXml *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns2__DatoXml);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns2__DatoXml ** SOAP_FMAC4 soap_in_PointerTons2__DatoXml(struct soap *soap, const char *tag, ns2__DatoXml **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns2__DatoXml **)soap_malloc(soap, sizeof(ns2__DatoXml *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns2__DatoXml *)soap_instantiate_ns2__DatoXml(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns2__DatoXml ** p = (ns2__DatoXml **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns2__DatoXml, sizeof(ns2__DatoXml), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__DatoXml(struct soap *soap, ns2__DatoXml *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons2__DatoXml);
	if (soap_out_PointerTons2__DatoXml(soap, tag?tag:"ns2:DatoXml", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns2__DatoXml ** SOAP_FMAC4 soap_get_PointerTons2__DatoXml(struct soap *soap, ns2__DatoXml **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons2__DatoXml(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, 0, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE__QName);
	if (soap_out__QName(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_string);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, 0, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_string);
	if (soap_out_string(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapC.cpp */
